init = true;
/**
 * Chrome - Utility (cu)
 * 
 *  TODO:
 *   ---- inject script instead of content script, to have access to window variable: https://stackoverflow.com/questions/20499994/access-window-variable-from-content-script
 *   - scope function groups to classes
 *   - add option icon to browser, which should open a window where you can customize options
 *      ---> extend function prepareActionBar()
 *   - make twitch queryselector generic, bcs it may not work
 *   - save user Options somewhere else than localstorage, so it is consistent between websites
 *   -- implement better handling of version Update of local userOptions (in loadUserSettings)
 * 
 * search for TODO to find places that need to be improved
 * search for TODO#1 to find cool places to improve
 */

// --- UTILITY FUNCTIONS ---
function repeatIfCondition(fn, condition = () => true, fnArgs = [], pauseInBg = true) {
  return new Interval(function repeatIf() {
    if (condition()) {
      fnArgs?.length ? fn(...fnArgs) : fn();
    }
  }, 300, pauseInBg);
}

function repeatUntilCondition(fn, condition = () => true, fnArgs = [], pauseInBg = true) {
  const interval = new Interval(function repeatUntil() {
    if (condition()) {
      fnArgs?.length ? fn(...fnArgs) : fn();
      interval.pause();
      interval.finished = true;
    }
  }, 300, pauseInBg);
}
const registeredIntervals = [];
class Interval {
  constructor(handler, timeout, pauseInBg = true, playCondition = () => true, autoplay = true) {
    this.handler = handler;
    this.timeout = timeout;
    this.pauseInBg = pauseInBg;
    this.isPlaying = false;
    this.finished = false;
    this.pause = () => {
      clearInterval(this.currentInterval);
      this.isPlaying = false;
    };
    this.play = () => {
      if (this.currentInterval) clearInterval(this.currentInterval);
      this.currentInterval = setInterval(this.handler, this.timeout);
      this.isPlaying = true;
    };
    if (autoplay) this.play();
    this.playCondition = playCondition;
    registeredIntervals.push(this);
  }
}
function insertCSS(css, id = 'alreadyAddedCss', overwrite = false) {
  const alreadyExists = document.getElementById(id);
  if (alreadyExists) {
    if (!overwrite) return;
    document.getElementById(id).remove();
  };
  const styleTag = document.createElement('style');
  styleTag.id = id;
  styleTag.textContent = css;
  document.head.appendChild(styleTag);
  console.debug(yellow('inserting css... id: "' + id + '"'));
}
// --- UTILITY FUNCTIONS ---
function showExtensionInfoInLog() {
  const excludeFromLog = ['version'];
  console.log(red('Chrome:Utility:Extension starting'));
  console.log(
    blue(
      'this extension currently supports Improvements for the following websites:\n' + reset('') +
      '- ' + purple('PGSurveyHelper') + ': NodeInfo\n' +
      '- ' + purple('YouTube') + ': Prevent YouTube from hiding dates on smaller screen resolutions\n- ' +
      Object.entries(userOptions).filter(([k]) => !excludeFromLog.includes(k)).map(([k, v]) => {
        return [purple(k), ': ' + Object.values(v).map(val => val.featureName).join(', ') + '\n'].join('');
      }).join('- ')
    )
  );
}
document.addEventListener('DOMContentLoaded', function () {
  websiteSelector();
  if (!matcher) return;
  showExtensionInfoInLog();
  loadUserSettings();
  startFixing();
  intervalHandler();
  init = false;
}, false);

class Design {
  constructor(name, primary, secondary) {
    this.name = name;
    this.primary = primary;
    this.secondary = secondary;
  }
}
const designMap = {
  amazon: ['#000', '#ff9900'],
  default: ['#000', '#ff9900'],
}
cachedDesignForSite = {};
function getDesign(site) {
  if (!designMap[site]) return new Design('default', ...designMap['default']);
  if (cachedDesignForSite[site]) return cachedDesignForSite[site];
  const design = new Design(site, ...designMap[site]);
  cachedDesignForSite[site] = design;
  return design;
};
let settingsOverlay = null;
let mouseOver = false;
let timeout = null;
const svg = {
  netflix: '<svg xmlns="http://www.w3.org/2000/svg" width="100" height="27" viewBox="0 0 1024 277"><path d="m141 259-47 6-50-145v151c-15 1-29 4-44 6V0h41l56 157V0h44v259zm85-158h58v43l-58 1v64l76-5v42l-119 9V0h119v43h-76v58zm237-58h-45v199l-43 1V43h-45V0h133v43zm70 55h60v44h-60v98h-42V0h121v43h-79v55zm149 104c25 0 50 2 74 4v42l-117-5V0h43v202zm110 49 43 4V0h-43v251zM1024 0l-55 132 55 145-49-8-31-80-31 73-47-5 56-127L872 0h46l28 73 31-73h47z" fill="#d81f26"/></svg>',
  crunchyroll: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 96 18"><path fill="#f47521" d="M94 14V3h2v11ZM90 14V3h2v11ZM88 10c0 3-1 4-3 4s-4-1-4-4 1-4 4-4 3 2 3 4Zm-1 0c0-2-1-2-2-2s-2 0-2 2 1 3 2 3 2-1 2-3ZM80 6v2h-2v6h-2V7l4-1ZM69 17l1-3-3-8h2l2 6 2-6h2l-3 8-1 3ZM66 9v5h-2V9l-1-1a5 5 0 0 0-2 0v6h-2V3h2v3a4 4 0 0 1 2 0c2 0 3 1 3 3ZM56 13a6 6 0 0 0 2-1v2a6 6 0 0 1-3 0c-2 0-3-1-3-4s1-4 4-4a9 9 0 0 1 2 0v2a6 6 0 0 0-2 0c-2 0-2 0-2 2s1 3 2 3ZM51 9v5h-2V9l-2-1h-1v6h-2V8c0-2 1-2 3-2 3 0 4 1 4 3ZM42 6v5c0 2-1 3-3 3s-4-1-4-4V7h2v5l2 1 1-1V6ZM34 6v2h-2v6h-2V7l4-1ZM26 13a5 5 0 0 0 2-1v2a6 6 0 0 1-3 0c-2 0-3-1-3-4s1-4 4-4a9 9 0 0 1 2 0v2a6 6 0 0 0-2 0c-1 0-2 0-2 2s1 3 2 3ZM2 10a8 8 0 0 1 16 0V9a9 9 0 1 0-9 9h1a8 8 0 0 1-8-8Z"/><path fill="#f47521" d="M14 11a3 3 0 0 1-1-6 6 6 0 0 0-2-1 6 6 0 1 0 6 7 5 5 0 0 0 0-2 3 3 0 0 1-3 2Z"/></svg>',
  settingsIcon: '<svg width="20" height="20" viewBox="0 0 778.3 778.3" xml:space="preserve" xmlns="http://www.w3.org/2000/svg"><path d="M421 778h-64c-24 0-43-19-43-43v-78c-24-6-46-16-67-28l-50 49a43 43 0 0 1-62 0l-45-45a44 44 0 0 1 1-62l52-51c-10-18-17-36-22-56H44c-24 0-44-19-44-43v-64c0-24 20-43 44-43h77c6-24 16-46 29-67l-58-58a43 43 0 0 1 1-62l45-44c8-8 19-13 30-13 12 0 23 5 31 13l60 60c17-10 36-17 55-22V44c0-24 19-44 43-44h64c24 0 43 20 43 44v77c20 5 39 13 58 23l60-59c8-9 19-13 30-13 12 0 23 5 31 13l45 45a43 43 0 0 1 0 61l-58 58c12 20 21 42 28 65h77c24 0 43 20 43 44v63c0 24-19 43-43 43h-77c-6 20-14 39-24 58l52 52a43 43 0 0 1 0 61l-45 45c-8 8-19 12-31 12-11 0-22-4-31-12l-49-50c-21 12-42 21-65 28v77c-1 24-20 43-44 43zM244 603l6 5c24 15 49 26 76 32l8 2v93c0 13 10 23 23 23h64c13 0 23-10 23-23v-93l8-2c26-6 51-17 74-31l7-4 60 60c4 5 10 7 17 7 6 0 12-2 16-6l45-45a24 24 0 0 0 1-34l-63-62 4-7c12-21 21-43 27-66l2-7h92c14 0 24-11 24-24v-63c0-14-10-24-24-24h-92l-2-8c-6-26-17-51-31-74l-5-6 69-69a24 24 0 0 0 0-33l-44-45c-5-5-11-7-17-7s-12 2-17 7l-70 70-7-4c-21-12-43-21-66-27l-8-2V44c0-13-10-24-23-24h-64c-13 0-23 11-23 24v92l-8 2c-22 6-44 14-64 26l-7 4-70-71c-4-5-10-7-17-7-6 0-12 2-16 7l-45 44c-10 10-10 25-1 34l69 69-4 6c-15 24-26 49-33 76l-2 8H43c-13 0-23 10-23 23v64c0 13 10 24 23 24h93l2 7c5 23 14 44 26 64l3 7-62 62c-10 9-10 24 0 34l44 45c5 4 11 7 17 7s12-3 17-7l61-61z"/><path d="M389 537a149 149 0 1 1 0-297 149 149 0 0 1 0 297zm0-276a129 129 0 1 0 0 257 129 129 0 0 0 0-257z"/></svg>',
  twitch: '<svg height="32" viewBox="0 0 1139 379" xmlns="http://www.w3.org/2000/svg"><g data-name="Layer 2"><g data-name="Layer 1"><path class="wordmark-logo__bg fill-purple" d="M1119 269h-80v-99h-20v99h-80V20h80v70h60l40 40zm-199-99h-80v20h80v79H800l-40-40v-99l40-40h120zm-180 0h-70v20h70v79H630l-40-40V20h80v70h70zM570 70h-80V20h80zm0 199h-80V90h80zm-100 0H230l-40-40V90h80v100h20V90h80v100h20V90h80zm-300-99h-70v20h70v79H60l-40-40V20h80v70h70zm919-100h-50V0H930l-51 70h-89l-30 30V70h-70V0H470v70H160L110 0H0v239l140 140h140v-40l40 40h270v-40l40 40h130v-40l40 40h250l90-90V120z" fill="#9145ff"/><path class="wordmark-logo__text fill-white" d="M940 269h79v-99h20v99h80V130l-40-40h-60V20h-79v249zm-350-40 40 40h110v-79h-70v-20h70V90h-70V20h-80v209zm170 0 40 40h120v-79h-80v-20h80V90H800l-40 40v99zM490 20h80v50h-80zM170 90h-70V20H20v209l40 40h110v-79h-70v-20h70V90zm20 139 40 40h240V90h-80v100h-20V90h-80v100h-20V90h-80v139zM490 90h80v179h-80z" fill="#FFF"/></g></g></svg>',
  fextralife: '<svg xmlns="http://www.w3.org/2000/svg" xmlns:v="https://vecta.io/nano" width="400" height="117.647" fill-rule="evenodd"><path d="M72.593 3.87c-.642.916-.233 2.227 1.456 4.672l1.761 2.817c.774 1.419 1.532 2.42 3.837 5.068 1.906 2.189 2.36 3.101 2.477 4.972.137 2.188-.161 2.971-2.229 5.872-1.987 2.787-1.735 3.513 1.855 5.343 5.535 2.821 4.77 2.53 7.351 2.802 2.744.288 3.818.622 5.732 1.78 2.724 1.646 3.01 1.99 3.658 4.399.478 1.773.989 2.624 2.896 4.822l3.394 3.912c2.941 3.388 4.886 3.885 4.886 1.249 0-2.741-1.977-6.086-5.908-9.995-1.475-1.466-2.997-3.116-3.382-3.666l-1.783-2.5c-2.661-3.685-2.799-4.022-2.435-5.957.643-3.421-.049-4.851-3.409-7.051-.733-.48-1.735-1.22-2.225-1.644-1.095-.946-1.883-1.407-3.608-2.11-2.839-1.157-3.469-1.762-4.908-4.71-1.19-2.438-2.147-3.576-4.074-4.845-1.711-1.126-2.306-1.797-3.114-3.505-.984-2.081-1.629-2.58-2.228-1.725m184.99 24.3c-5.759.114-6.286.205-7.45 1.29-1.068.996-.707 2.031 1.307 3.746 1.615 1.375 2.431 2.477 2.944 3.975l.366 1.069.047 20.583c.049 21.258.026 22.139-.625 23.611-.362.817-1.543 2.139-2.511 2.81-1.954 1.354-1.669 3.181.641 4.112.932.375 1.052.381 7.281.37l23.334-.001 6.666.015.971-.477c1.27-.623 1.699-1.243 2.843-4.102 1.141-2.85 1.201-3.206.869-5.128-.736-4.267-2.573-4.807-4.621-1.359-2.174 3.659-8.484 5.59-16.312 4.992-4.488-.343-6.519-.972-7.79-2.416-1.19-1.352-1.126-.057-1.126-23.093v-20.75l.38-.941c.502-1.242 1.56-2.214 3.497-3.215 2.735-1.412 3.383-2.784 1.979-4.188-1.133-1.133-1.12-1.132-12.69-.903m41.334 10.246c-.092.031-.45.104-.796.162-2.364.396-2.419 2.058-.141 4.252 2.897 2.79 2.689 1.324 2.742 19.292.05 16.707.119 15.636-1.164 18.008-1.668 3.08-.881 3.62 5.275 3.62 5.823 0 6.6-.574 4.942-3.653-1.469-2.727-1.358-1.247-1.358-18.18 0-18.109-.246-16.635 3.235-19.414 2.149-1.716 2.379-2.164 1.54-3.003-1.131-1.131-3.235-1.362-7.525-.827-1.531.19-2.012.183-3.834-.061-2.039-.274-2.58-.31-2.916-.196m42.529.194c-.061.06-2.754.125-5.986.144s-7.045.133-8.473.254c-2.152.181-2.967.181-4.769-.003-3.465-.353-5.225.233-5.214 1.735.003.481.204.902 1.731 3.634 1.219 2.182 1.156 1.284 1.212 17.126.053 15.22.037 15.61-.785 18.25-.784 2.519-.508 3.464 1.139 3.908.709.191 10.28.257 10.79.075 1.113-.399 1.2-1.206.22-2.053-1.933-1.672-2.507-2.291-2.935-3.161l-.459-.936-.053-5.045c-.071-6.751.161-7.7 2.146-8.778 2.399-1.304 4.658-.712 7.439 1.95 3.277 3.135 4.342 2.625 4.966-2.377l.435-3.455c.335-2.634-.429-4.329-2.022-4.483-1.109-.106-1.761.293-3.869 2.37-2.675 2.636-4.472 3.207-6.637 2.11-1.966-.995-2.328-2.142-2.44-7.727-.111-5.575.19-6.727 2.033-7.761 2.466-1.383 8.655-.798 12.677 1.199 2.965 1.472 3.407 1.306 4.922-1.851.542-1.131 1.126-2.131 1.296-2.222 1.103-.591 3.593 1.325 4.789 3.684.92 1.815.915 1.733.864 17.601-.054 16.524.086 14.79-1.44 17.823-1.727 3.434-1.569 3.464 15.227 2.949 2.071-.064 4.407-.012 6.75.149 6.777.466 8.408-.45 8.409-4.719 0-3.494-1.292-4-3.627-1.422-3.47 3.832-13.859 4.695-16.69 1.387-1.595-1.864-2.121-11.473-.771-14.104 1.263-2.464 5.183-2.683 9.294-.52 2.866 1.509 3.583.75 3.862-4.082.272-4.697-.594-5.638-3.775-4.1-3.608 1.745-6.867 1.819-8.543.194-1.971-1.912-2.089-9.187-.182-11.243 1.95-2.102 8.753-1.909 14.215.402 3.202 1.354 4.355.748 4.594-2.417.293-3.869-1.118-4.787-6.827-4.445-1.765.106-7.676.219-13.135.251l-9.926.06-1.074.453c-2.117.892-2.09.892-3.843.124-2.118-.928-5.045-1.419-5.535-.928M112.403 56.981c-1.677 1.023-1.077 3.451 1.287 5.203 2.082 1.543 2.934 2.783 4.04 5.88.925 2.587 2.051 3.986 4.603 5.719 1.496 1.016 2.035 1.573 3.09 3.195 1.174 1.803 2.218 2.292 3.161 1.48.976-.839.714-2.305-.84-4.704-.477-.735-1.401-2.394-2.053-3.686-1.462-2.892-2.013-3.626-3.56-4.741-2.861-2.062-3.583-2.883-4.591-5.22-1.288-2.986-3.329-4.228-5.137-3.126m22.229 28.944c-1.075.584-.944 1.871.457 4.492a34.19 34.19 0 0 1 1.494 3.25c1.319 3.465 3.09 5.071 5.831 5.291 1.827.147 2.247-.76 1.521-3.291-.733-2.556-1.318-3.406-3.453-5.022-1.055-.798-1.771-1.628-3.41-3.95-.637-.902-1.623-1.213-2.44-.77" fill="#d6d6d7"/><path d="M149.057 2.258c-.784.343-1.57 1.611-1.804 2.909l-.333 1.583c-.576 2.528-.612 2.498 1.371 1.152 1.49-1.011 2.675-2.145 2.993-2.865.756-1.708-.655-3.468-2.227-2.779M72.3 3.029c-1.019 1.186-.588 2.712 1.762 6.235l2.239 3.426c.487.766 1.71 2.331 2.717 3.477 3.66 4.16 3.925 6.587 1.13 10.333-2.613 3.502-2.592 4.39.136 5.673 2.427 1.142 3.01 1.466 4.508 2.504 1.373.952 3.055 1.656 3.955 1.656.513 0 1.795.465 1.943.705.391.633-.762 1.021-3.6 1.209-.729.049-1.779.159-2.333.245-2.501.388-13.569.524-15.835.194-3.681-.535-4.294-1.305-4.218-5.294.058-3.032-.388-4.133-1.991-4.911-1.111-.539-2.552-.564-18.38-.324-12.051.183-13.483.176-15.833-.074-2.911-.311-3.883-.247-5.085.333-2.223 1.072-1.993 3.346.513 5.084 2.125 1.474 3.143 2.588 3.6 3.939l.387 1.144L27.964 58c.065 25.206.178 24.224-3.024 26.363-2.448 1.636-3.083 3.014-1.987 4.316 1.068 1.27 2.323 1.365 18.297 1.387 3.024.004 4.514-.828 4.699-2.623.173-1.681-.782-2.428-4.51-3.529-1.839-.543-2.905-1.475-3.359-2.935-.332-1.069-.379-15.306-.055-16.594.519-2.059 1.867-2.648 5.718-2.496 4.693.186 6.015.595 8.024 2.486 2.717 2.558 3.994 2.521 4.581-.131.371-1.673.324-10.872-.059-11.456-.799-1.223-1.457-1.174-3.174.238-2.349 1.931-3.142 2.169-8.282 2.481-6.953.423-7 .354-7-10.433 0-8.765.067-9.076 2.152-10.054l.932-.437 4.583.047c9.608.097 11.076.637 15.914 5.846.592.638 1.256 1.107 2.331 1.647 2.373 1.191 4.452 3.368 4.896 5.127.255 1.007.312 29.468.061 30.333-.106.367-.582 1.342-1.057 2.167-1.424 2.474-1.279 3.57.544 4.108.957.283 6.187.255 9.073-.048 3.205-.337 4.609-.305 5.174.117 1.84 1.375 1.658 3.338-.656 7.068-2.337 3.768-3.283 7.239-2.087 7.656 1.403.489 3.429-1.066 5.193-3.984.595-.985 1.375-1.926 2.558-3.086 1.742-1.709 1.93-2.001 3.158-4.909.626-1.482 1.324-2.007 3.567-2.679 3.917-1.175 4.988-2.846 4.771-7.447-.135-2.877-.167-2.817 2.128-3.986 3.624-1.845 4.003-2.23 5.912-6.002 1.782-3.522 2.807-4.356 5.146-4.189 2.47.177 3.795 1.571 5.362 5.639 1.147 2.978 1.922 3.973 4.548 5.845 2.012 1.434 2.5 2.08 5.389 7.147 1.37 2.402 1.589 2.667 3.163 3.846 1.529 1.144 2.225 1.963 3.045 3.583.189.374.723 1.309 1.186 2.079s1.156 2.19 1.54 3.154c1.531 3.842 3.679 5.671 6.662 5.671 2.613 0 1.658-5.395-1.401-7.916-4.814-3.967-4.864-6.403-.151-7.41 3.103-.664 3.259-1.604.627-3.789-1.25-1.038-1.883-2.004-2.203-3.36-.275-1.17-.323-27.557-.054-29.424.436-3.012 2.392-4.432 5.431-3.942 5.397.871 7.523 1.921 9.328 4.606 1.931 2.873 2.944 2.5 3.742-1.38.874-4.247 3.106-4.664 4.884-.911l.526 1.11-.026 15.273-.026 15.273-.609 1.727c-1.582 4.478-1.341 4.727 4.578 4.727 6.286 0 7.173-.616 5.448-3.786-1.288-2.37-1.366-2.795-1.359-7.464.006-3.434.054-4.241.305-5.072 1.015-3.358 3.633-2.474 6.089 2.054.467.862 1.476 2.437 2.243 3.5s1.786 2.572 2.266 3.351c1.742 2.827 2.496 3.446 6.714 5.511 3.872 1.894 5.937 2.375 7.294 1.697 1.163-.581.835-1.096-1.963-3.084-1.585-1.127-2.25-1.892-3.219-3.707-1.161-2.177-1.895-3.149-4.125-5.467-2.521-2.62-3.36-4.13-3.36-6.049 0-1.526.585-2.242 2.749-3.37 2.187-1.139 2.895-1.917 4.17-4.589 3.793-7.943 1.995-13.707-5.002-16.032-1.009-.336-2.561-.943-3.449-1.35-2.804-1.285-5.021-1.482-11.105-.987-5.301.43-11.821.47-13.78.083-2.696-.533-4.576-.651-7.75-.488l-6.333.325-5.476.359c-5.757.509-8.024.02-8.024-1.733 0-1.121 1.19-1.784 3.667-2.044 1.432-.15 2.334-.507 3.838-1.521 1.424-.961 2.419-1.479 4.078-2.124 3.196-1.243 3.337-3.82.342-6.278-2.589-2.125-2.842-4.958-.592-6.617 2.242-1.651 3.28-3.238 4.06-6.202.888-3.377.795-3.542-1.3-2.305-3.416 2.016-3.914 2.47-5.32 4.851-1.027 1.739-1.34 2.065-3.133 3.26-.703.468-1.64 1.28-2.084 1.804-2.036 2.404-1.994 2.377-4.061 2.638-2.322.293-3.269 2.141-3.076 6.002.268 5.361-1.8 8.632-6.01 9.505-4.099.85-5.159 2.407-5.159 7.579 0 4.634.658 5.062 3.074 2 1.839-2.331 2.481-2.725 6.509-3.999 5.497-1.738 7.603-1.019 8.336 2.845.37 1.949.216 28.003-.171 29.038-1.189 3.178-3.598 1.152-7.094-5.971-1.559-3.176-1.911-3.642-3.835-5.083-3.316-2.481-3.417-2.632-5.406-8.145-1.639-4.542-1.754-4.722-3.249-5.106-2.276-.585-3.227-1.321-4.338-3.361-2.03-3.725-2.409-4.254-4.576-6.385-1.399-1.374-2.632-2.792-3.623-4.167-.826-1.145-2.037-2.758-2.691-3.583-1.886-2.381-2.165-3.322-1.603-5.417.669-2.49-.358-4.447-3.384-6.45a51.53 51.53 0 0 1-2.778-2.004c-.783-.616-1.844-1.259-2.583-1.566-3.383-1.403-4.101-2.042-5.518-4.909-1.187-2.402-2.297-3.726-4.304-5.133-1.688-1.183-2.169-1.788-2.943-3.702-.35-.865-.768-1.704-.93-1.863-.896-.882-1.213-.913-1.843-.177m1.558.846c.18.206.613.98.963 1.72.808 1.708 1.403 2.379 3.114 3.505 1.927 1.269 2.884 2.407 4.074 4.845 1.439 2.948 2.069 3.553 4.908 4.71 1.725.703 2.513 1.164 3.608 2.11.49.424 1.492 1.164 2.225 1.644 3.36 2.2 4.052 3.63 3.409 7.051-.364 1.935-.226 2.272 2.435 5.957l1.783 2.5c.385.55 1.907 2.2 3.382 3.666 3.931 3.909 5.908 7.254 5.908 9.995 0 2.636-1.945 2.139-4.886-1.249l-3.394-3.912c-1.907-2.198-2.418-3.049-2.896-4.822-.648-2.409-.934-2.753-3.658-4.399-1.914-1.158-2.988-1.492-5.732-1.78-2.581-.272-1.816.019-7.351-2.802-3.59-1.83-3.842-2.556-1.855-5.343 2.068-2.901 2.366-3.684 2.229-5.872-.117-1.871-.571-2.783-2.477-4.972-2.305-2.648-3.063-3.649-3.837-5.068-.383-.702-1.175-1.969-1.761-2.817-1.295-1.874-1.707-2.748-1.712-3.63-.007-1.25.834-1.823 1.521-1.037m179.375 24.16c-4.47.446-5.257 2.554-1.988 5.323 3.576 3.029 3.41 1.727 3.413 26.725.003 23.962.166 22.772-3.374 24.618-1.81.944-2.187 2.06-1.162 3.442 1.25 1.687 2.245 1.872 9.878 1.838l22.4-.006c8.647.044 9.084-.072 10.356-2.758l1.43-2.967c.953-1.953.961-2.063.325-4.627-.699-2.818-1.158-3.456-2.487-3.456-.88 0-1.501.533-2.386 2.049-1.391 2.381-2.29 3.014-6.077 4.274-5.779 1.924-16.037 1.123-17.964-1.403-1.083-1.42-1.014.126-1.014-22.754v-20.75l.381-.94c.514-1.272 1.572-2.223 3.675-3.304 3.17-1.628 3.625-3.705 1.097-5.005l-.812-.417h-7.254l-8.437.118m15.603.231c3.067.911 2.812 3.263-.542 4.995-1.937 1.001-2.995 1.973-3.497 3.215l-.38.941v20.75c0 23.036-.064 21.741 1.126 23.093 1.271 1.444 3.302 2.073 7.79 2.416 7.828.598 14.138-1.333 16.312-4.992 2.048-3.448 3.885-2.908 4.621 1.359.332 1.922.272 2.278-.869 5.128-1.144 2.859-1.573 3.479-2.843 4.102l-.971.477-6.666-.015c-7.436-.017-13.92-.017-23.334.001-6.229.011-6.349.005-7.281-.37-2.31-.931-2.595-2.758-.641-4.112.968-.671 2.149-1.993 2.511-2.81.651-1.472.674-2.353.625-23.611l-.047-20.583-.366-1.069c-.513-1.498-1.329-2.6-2.944-3.975-2.014-1.715-2.375-2.75-1.307-3.746 1.164-1.085 1.691-1.176 7.45-1.29 9.851-.195 10.286-.191 11.253.096m38.081 9.999c-1.23.186-2.192.219-3.667.129-5.269-.324-6.458-.137-7.15 1.127-.523.956-.277 1.692.939 2.804 3.751 3.43 3.429 1.567 3.474 20.092.042 17.038.161 15.524-1.402 17.875-1.052 1.582-1.188 1.982-.851 2.496.667 1.018 3.33 1.481 7.648 1.329 5.103-.179 5.985-1.071 4.118-4.164-1.554-2.575-1.443-1.174-1.443-18.207V46.743l.548-1.113c.617-1.253 1.318-1.937 3.653-3.566 2.281-1.591 2.417-1.951 1.055-2.81-1.688-1.066-4.114-1.412-6.922-.989m-84.178.304c-1.572.684-3.34 4.826-4.489 10.514-.67 3.315-1.643 5.509-4.102 9.25-2.317 3.526-3.657 6.558-4.601 10.412-.615 2.507-.669 2.639-2.553 6.172-1.143 2.143-1.381 2.468-2.928 4-4.284 4.238-3.568 5.286 3.434 5.028 5.499-.202 6.318-.897 4.748-4.028-1.309-2.612-1.368-3.992-.27-6.339 1.546-3.305 3.724-4.125 10.855-4.09 6.139.03 6.275.075 9.454 3.081 2.829 2.676 3.234 4.387 1.811 7.656-1.501 3.447-1.116 3.692 5.819 3.692 7.432 0 7.738-.264 5.313-4.584-.386-.687-1.086-2.186-1.556-3.331-1.013-2.464-1.433-3.223-2.586-4.669-1.373-1.72-1.727-2.339-2.493-4.358-.396-1.043-1.13-2.721-1.632-3.728s-1.271-2.756-1.708-3.888c-.667-1.725-1.012-2.345-2.132-3.833-1.603-2.129-2.199-3.357-3.13-6.443-2.699-8.952-4.58-11.679-7.254-10.514m79.094.043c1.822.244 2.303.251 3.834.061 4.29-.535 6.394-.304 7.525.827.839.839.609 1.287-1.54 3.003-3.481 2.779-3.235 1.305-3.235 19.414 0 16.933-.111 15.453 1.358 18.18 1.658 3.079.881 3.653-4.942 3.653-6.156 0-6.943-.54-5.275-3.62 1.283-2.372 1.214-1.301 1.164-18.008-.053-17.968.155-16.502-2.742-19.292-2.278-2.194-2.223-3.856.141-4.252.346-.058.704-.131.796-.162.336-.114.877-.078 2.916.196m31.5-.071c-7.363.185-10.361.211-12.833.112-1.922-.077-3.125.29-4.079 1.244-.518.518-.504.558.962 2.753.637.953 1.392 2.228 1.679 2.833l.521 1.1.048 10.292c.033 7.018.103 10.292.222 10.292s.152-3.097.103-9.959c-.079-11.05-.049-10.736-1.221-12.834-1.527-2.732-1.728-3.153-1.731-3.634-.011-1.499 1.75-2.088 5.194-1.737 1.814.185 2.608.182 5.02-.017 1.576-.13 4.29-.219 6.032-.198s4.789-.043 6.771-.143c4.155-.209 4.571-.156 6.954.889 1.76.772 1.731.773 3.849-.12l1.074-.453 9.926-.06 13.135-.251c5.709-.342 7.12.576 6.827 4.445-.239 3.165-1.392 3.771-4.594 2.417-5.462-2.311-12.265-2.504-14.215-.402-1.907 2.056-1.789 9.331.182 11.243 1.676 1.625 4.935 1.551 8.543-.194 3.181-1.538 4.047-.597 3.775 4.1-.279 4.832-.996 5.591-3.862 4.082-5.173-2.722-9.157-1.774-9.794 2.331-.678 4.368-.014 10.792 1.271 12.293 2.831 3.308 13.22 2.445 16.69-1.387 2.335-2.578 3.627-2.072 3.627 1.422-.001 4.269-1.632 5.185-8.409 4.719-2.343-.161-4.679-.213-6.75-.149-16.796.515-16.954.485-15.227-2.949 1.526-3.033 1.386-1.299 1.44-17.823.051-15.868.056-15.786-.864-17.601-1.196-2.359-3.686-4.275-4.789-3.684-.17.091-.754 1.091-1.296 2.222-1.515 3.157-1.957 3.323-4.922 1.851-4.022-1.997-10.211-2.582-12.677-1.199-1.843 1.034-2.144 2.186-2.033 7.761.112 5.585.474 6.732 2.44 7.727 2.165 1.097 3.962.526 6.637-2.11 2.108-2.077 2.76-2.476 3.869-2.37 1.593.154 2.357 1.849 2.022 4.483l-.435 3.455c-.624 5.002-1.689 5.512-4.966 2.377-2.781-2.662-5.04-3.254-7.439-1.95-1.985 1.078-2.217 2.027-2.146 8.778l.053 5.045.459.936c.428.87 1.002 1.489 2.935 3.161.98.847.893 1.654-.22 2.053-.51.182-10.081.116-10.79-.075-1.647-.444-1.923-1.389-1.139-3.908.802-2.582 1.269-10.13.65-10.513-.138-.086-.157.691-.07 2.948.142 3.687-.018 5.163-.82 7.559-.881 2.634-.682 3.568.875 4.12 1.182.419 11.559.307 12.149-.131 1.111-.825.762-1.526-1.678-3.362-2.109-1.587-2.313-2.397-2.239-8.919l.054-4.869.46-.937c1.582-3.22 5.455-3.034 8.883.427 3.029 3.059 4.575 2.725 5.062-1.094.796-6.248.839-7.529.29-8.592-1.079-2.086-3.132-1.723-5.861 1.036-2.853 2.885-5.331 3.406-7.349 1.545-1.21-1.116-1.426-2.067-1.524-6.718-.118-5.636.174-6.65 2.206-7.667l1-.5 3.25.015c4.013.019 5.519.35 8.245 1.812 2.787 1.495 3.344 1.311 4.836-1.601 1.349-2.633 2.689-2.81 4.662-.615 2.068 2.3 2.048 2.109 2.015 19.306-.03 15.982.065 14.851-1.455 17.358-2.045 3.372-1.535 3.731 5.28 3.714l19.834-.001c4.291.023 5.762-1.316 5.742-5.226-.019-3.816-1.249-4.352-3.844-1.676s-4.32 3.226-10.232 3.239c-4.672.011-5.937-.475-7.031-2.703l-.469-.955-.052-5.044c-.061-5.826.028-6.432 1.112-7.516 1.591-1.591 5.518-1.372 8.434.471 2.933 1.855 3.805.981 4.193-4.2.405-5.413-.496-6.354-4.292-4.479-3.675 1.814-7.358 1.628-8.718-.442-1.237-1.881-1.068-8.608.254-10.114 1.852-2.109 9.251-1.929 14.162.344 1.992.923 3.019 1.057 3.658.48 1.683-1.523 1.596-5.994-.142-7.232-.97-.69-.996-.692-11.327-.493l-14.782.128c-2.354-.066-2.608-.041-4.353.421l-1.853.49-1.647-.561c-1.987-.677-3.168-.718-13.397-.462M98.406 43.7c.953.849 4.574 4.872 6.554 7.281 2.242 2.728 2.727 4.662 1.865 7.436-.658 2.118-1.43 3.105-3.328 4.251-2.958 1.788-4.06 3.445-5.179 7.791-.574 2.228-.639 2.346-1.632 2.958-1.451.895-2.19 1.609-3.341 3.233-2.169 3.059-3.368 3.677-8.285 4.272-5.424.657-8.799-.896-9.539-4.389-.238-1.119-.247-8.737-.013-10.18.709-4.369 4.578-5.036 9.282-1.601 3.725 2.721 5.627 1.03 5.627-5.002 0-5.348-1.674-6.275-6.334-3.508-5.996 3.56-8.955 1.383-8.708-6.409.184-5.775 1.309-6.604 8.292-6.102 4.257.306 5.007.517 7.74 2.17 1.897 1.148 2.741.812 3.863-1.535 1.029-2.153 1.383-2.228 3.136-.666m80.683-.299c3.547 1.287 5.744 4.265 5.744 7.783 0 2.572-3.139 7.973-5.197 8.94-3.363 1.581-6.434 1.275-7.388-.735-.805-1.696-.697-11.974.145-13.806 1.19-2.591 3.498-3.343 6.696-2.182m44.817 10.096c.877.427 1.593 1.506 2.248 3.39 2.167 6.228 1.496 8.03-2.992 8.03-4.138 0-5.163-1.41-4.342-5.975.843-4.688 2.656-6.628 5.086-5.445m-108.647 3.586c.972.492 1.479 1.164 2.281 3.024 1.008 2.337 1.73 3.158 4.591 5.22 1.547 1.115 2.098 1.849 3.56 4.741.652 1.292 1.576 2.951 2.053 3.686 1.554 2.399 1.816 3.865.84 4.704-.943.812-1.987.323-3.161-1.48-1.055-1.622-1.594-2.179-3.09-3.195-2.552-1.733-3.678-3.132-4.603-5.719-1.106-3.097-1.958-4.337-4.04-5.88-3.666-2.718-2.327-7.07 1.569-5.101m21.015 28.904c.288.176.647.495.798.708 1.639 2.322 2.355 3.152 3.41 3.95 2.135 1.616 2.72 2.466 3.453 5.022.726 2.531.306 3.438-1.521 3.291-2.741-.22-4.512-1.826-5.831-5.291a34.19 34.19 0 0 0-1.494-3.25c-.49-.917-.972-1.969-1.07-2.339-.464-1.741.842-2.952 2.255-2.091M0 114.375v3.125h200 200v-3.125-3.125H200 0v3.125" fill="#bc211c"/><path d="M0 55.564v55.564l.375.1c.49.132 398.76.132 399.25 0l.375-.1V55.564 0H200 0v55.564M150.465 2.306c2.03 1.083 1.154 3.338-2.174 5.596-1.983 1.346-1.947 1.376-1.371-1.152.125-.55.275-1.263.333-1.583.407-2.256 1.882-3.57 3.212-2.861m-76.867.402c.669.555.886.902 1.475 2.361.774 1.914 1.255 2.519 2.943 3.702 2.007 1.407 3.117 2.731 4.304 5.133 1.417 2.867 2.135 3.506 5.518 4.909.739.307 1.8.95 2.583 1.566a51.53 51.53 0 0 0 2.778 2.004c3.026 2.003 4.053 3.96 3.384 6.45-.562 2.095-.283 3.036 1.603 5.417.654.825 1.865 2.438 2.691 3.583.991 1.375 2.224 2.793 3.623 4.167 2.167 2.131 2.546 2.66 4.576 6.385 1.111 2.04 2.062 2.776 4.338 3.361 1.495.384 1.61.564 3.249 5.106 1.989 5.513 2.09 5.664 5.406 8.145 1.924 1.441 2.276 1.907 3.835 5.083 3.496 7.123 5.905 9.149 7.094 5.971.387-1.035.541-27.089.171-29.038-.733-3.864-2.839-4.583-8.336-2.845-4.028 1.274-4.67 1.668-6.509 3.999-2.416 3.062-3.074 2.634-3.074-2 0-5.172 1.06-6.729 5.159-7.579 4.21-.873 6.278-4.144 6.01-9.505-.193-3.861.754-5.709 3.076-6.002 2.067-.261 2.025-.234 4.061-2.638.444-.524 1.381-1.336 2.084-1.804 1.793-1.195 2.106-1.521 3.133-3.26 1.406-2.381 1.904-2.835 5.32-4.851 2.095-1.237 2.188-1.072 1.3 2.305-.78 2.964-1.818 4.551-4.06 6.202-2.25 1.659-1.997 4.492.592 6.617 2.995 2.458 2.854 5.035-.342 6.278-1.659.645-2.654 1.163-4.078 2.124-1.504 1.014-2.406 1.371-3.838 1.521-2.477.26-3.667.923-3.667 2.044 0 1.753 2.267 2.242 8.024 1.733a188.19 188.19 0 0 1 5.476-.359l6.333-.325c3.174-.163 5.054-.045 7.75.488 1.959.387 8.479.347 13.78-.083 6.084-.495 8.301-.298 11.105.987.888.407 2.44 1.014 3.449 1.35 6.997 2.325 8.795 8.089 5.002 16.032-1.275 2.672-1.983 3.45-4.17 4.589-2.164 1.128-2.749 1.844-2.749 3.37 0 1.919.839 3.429 3.36 6.049 2.23 2.318 2.964 3.29 4.125 5.467.969 1.815 1.634 2.58 3.219 3.707 2.798 1.988 3.126 2.503 1.963 3.084-1.357.678-3.422.197-7.294-1.697-4.218-2.065-4.972-2.684-6.714-5.511-.48-.779-1.5-2.287-2.266-3.351s-1.776-2.638-2.243-3.5c-2.456-4.528-5.074-5.412-6.089-2.054-.251.831-.299 1.638-.305 5.072-.007 4.669.071 5.094 1.359 7.464 1.725 3.17.838 3.786-5.448 3.786-5.919 0-6.16-.249-4.578-4.727l.609-1.727.026-15.273.026-15.273-.526-1.11c-1.778-3.753-4.01-3.336-4.884.911-.798 3.88-1.811 4.253-3.742 1.38-1.805-2.685-3.931-3.735-9.328-4.606-3.039-.49-4.995.93-5.431 3.942-.269 1.867-.221 28.254.054 29.424.32 1.356.953 2.322 2.203 3.36 2.632 2.185 2.476 3.125-.627 3.789-4.713 1.007-4.663 3.443.151 7.41 3.059 2.521 4.014 7.916 1.401 7.916-2.983 0-5.131-1.829-6.662-5.671-.384-.964-1.078-2.384-1.54-3.154s-.997-1.705-1.186-2.079c-.82-1.62-1.516-2.439-3.045-3.583-1.574-1.179-1.793-1.444-3.163-3.846-2.889-5.067-3.377-5.713-5.389-7.147-2.626-1.872-3.401-2.867-4.548-5.845-1.567-4.068-2.892-5.462-5.362-5.639-2.339-.167-3.364.667-5.146 4.189-1.909 3.772-2.288 4.157-5.912 6.002-2.295 1.169-2.263 1.109-2.128 3.986.217 4.601-.854 6.272-4.771 7.447-2.243.672-2.941 1.197-3.567 2.679-1.228 2.908-1.416 3.2-3.158 4.909-1.183 1.16-1.963 2.101-2.558 3.086-1.764 2.918-3.79 4.473-5.193 3.984-1.196-.417-.25-3.888 2.087-7.656 2.314-3.73 2.496-5.693.656-7.068-.565-.422-1.969-.454-5.174-.117-2.886.303-8.116.331-9.073.048-1.823-.538-1.968-1.634-.544-4.108.475-.825.951-1.8 1.057-2.167.251-.865.194-29.326-.061-30.333-.444-1.759-2.523-3.936-4.896-5.127-1.075-.54-1.739-1.009-2.331-1.647-4.838-5.209-6.306-5.749-15.914-5.846l-4.583-.047-.932.437c-2.085.978-2.152 1.289-2.152 10.054 0 10.787.047 10.856 7 10.433 5.14-.312 5.933-.55 8.282-2.481 1.717-1.412 2.375-1.461 3.174-.238.383.584.43 9.783.059 11.456-.587 2.652-1.864 2.689-4.581.131-2.009-1.891-3.331-2.3-8.024-2.486-3.851-.152-5.199.437-5.718 2.496-.324 1.288-.277 15.525.055 16.594.454 1.46 1.52 2.392 3.359 2.935 3.728 1.101 4.683 1.848 4.51 3.529-.185 1.795-1.675 2.627-4.699 2.623-15.974-.022-17.229-.117-18.297-1.387-1.096-1.302-.461-2.68 1.987-4.316 3.202-2.139 3.089-1.157 3.024-26.363l-.049-19.417-.387-1.144c-.457-1.351-1.475-2.465-3.6-3.939-2.506-1.738-2.736-4.012-.513-5.084 1.202-.58 2.174-.644 5.085-.333 2.35.25 3.782.257 15.833.074 15.828-.24 17.269-.215 18.38.324 1.603.778 2.049 1.879 1.991 4.911-.076 3.989.537 4.759 4.218 5.294 2.266.33 13.334.194 15.835-.194.554-.086 1.604-.196 2.333-.245 2.838-.188 3.991-.576 3.6-1.209-.148-.24-1.43-.705-1.943-.705-.9 0-2.582-.704-3.955-1.656-1.498-1.038-2.081-1.362-4.508-2.504-2.728-1.283-2.749-2.171-.136-5.673 2.795-3.746 2.53-6.173-1.13-10.333-1.007-1.146-2.23-2.711-2.717-3.477l-2.239-3.426c-1.892-2.836-2.113-3.307-2.167-4.612-.066-1.569.869-2.636 1.703-1.944m196.138 25.626c2.528 1.3 2.073 3.377-1.097 5.005-2.103 1.081-3.161 2.032-3.675 3.304l-.381.94v20.75c0 22.88-.069 21.334 1.014 22.754 1.927 2.526 12.185 3.327 17.964 1.403 3.787-1.26 4.686-1.893 6.077-4.274.885-1.516 1.506-2.049 2.386-2.049 1.329 0 1.788.638 2.487 3.456.636 2.564.628 2.674-.325 4.627l-1.43 2.967c-1.272 2.686-1.709 2.802-10.356 2.758a2149.38 2149.38 0 0 0-22.4.006c-7.633.034-8.628-.151-9.878-1.838-1.025-1.382-.648-2.498 1.162-3.442 3.54-1.846 3.377-.656 3.374-24.618-.003-24.998.163-23.696-3.413-26.725-2.209-1.872-2.582-2.89-1.478-4.043 1.198-1.249 2.465-1.398 11.903-1.398h7.254l.812.417m42.466 10.178c3.09 1.041 3.202 1.725.582 3.552-2.335 1.629-3.036 2.313-3.653 3.566l-.548 1.113v15.003c0 17.033-.111 15.632 1.443 18.207 1.867 3.093.985 3.985-4.118 4.164-4.318.152-6.981-.311-7.648-1.329-.337-.514-.201-.914.851-2.496 1.563-2.351 1.444-.837 1.402-17.875-.045-18.525.277-16.662-3.474-20.092-1.216-1.112-1.462-1.848-.939-2.804.692-1.264 1.881-1.451 7.15-1.127 1.475.09 2.437.057 3.667-.129 2.006-.302 3.919-.213 5.285.247m-87.322.051c1.517.651 3.153 4.017 5.113 10.52.931 3.086 1.527 4.314 3.13 6.443 1.12 1.488 1.465 2.108 2.132 3.833.437 1.132 1.206 2.881 1.708 3.888s1.236 2.685 1.632 3.728c.766 2.019 1.12 2.638 2.493 4.358 1.153 1.446 1.573 2.205 2.586 4.669.47 1.145 1.17 2.644 1.556 3.331 2.425 4.32 2.119 4.584-5.313 4.584-6.935 0-7.32-.245-5.819-3.692 1.423-3.269 1.018-4.98-1.811-7.656-3.179-3.006-3.315-3.051-9.454-3.081-7.131-.035-9.309.785-10.855 4.09-1.098 2.347-1.039 3.727.27 6.339 1.57 3.131.751 3.826-4.748 4.028-7.002.258-7.718-.79-3.434-5.028 1.547-1.532 1.785-1.857 2.928-4 1.884-3.533 1.938-3.665 2.553-6.172.944-3.854 2.284-6.886 4.601-10.412 2.459-3.741 3.432-5.935 4.102-9.25 1.649-8.164 3.878-11.7 6.63-10.52m121.85.44l1.647.561 1.853-.49c1.745-.462 1.999-.487 4.353-.421 3.338.092 3.365.092 14.782-.128 10.331-.199 10.357-.197 11.327.493 1.738 1.238 1.825 5.709.142 7.232-.639.577-1.666.443-3.658-.48-4.911-2.273-12.31-2.453-14.162-.344-1.322 1.506-1.491 8.233-.254 10.114 1.36 2.07 5.043 2.256 8.718.442 3.796-1.875 4.697-.934 4.292 4.479-.388 5.181-1.26 6.055-4.193 4.2-2.916-1.843-6.843-2.062-8.434-.471-1.084 1.084-1.173 1.69-1.112 7.516l.052 5.044.469.955c1.094 2.228 2.359 2.714 7.031 2.703 5.912-.013 7.632-.558 10.232-3.239s3.825-2.14 3.844 1.676c.02 3.91-1.451 5.249-5.742 5.226a4051.63 4051.63 0 0 0-19.834.001c-6.815.017-7.325-.342-5.28-3.714 1.52-2.507 1.425-1.376 1.455-17.358.033-17.197.053-17.006-2.015-19.306-1.973-2.195-3.313-2.018-4.662.615-1.492 2.912-2.049 3.096-4.836 1.601-2.726-1.462-4.232-1.793-8.245-1.812l-3.25-.015-1 .5c-2.032 1.017-2.324 2.031-2.206 7.667.098 4.651.314 5.602 1.524 6.718 2.018 1.861 4.496 1.34 7.349-1.545 2.729-2.759 4.782-3.122 5.861-1.036.549 1.063.506 2.344-.29 8.592-.487 3.819-2.033 4.153-5.062 1.094-3.428-3.461-7.301-3.647-8.883-.427l-.46.937-.054 4.869c-.074 6.522.13 7.332 2.239 8.919 2.44 1.836 2.789 2.537 1.678 3.362-.59.438-10.967.55-12.149.131-1.557-.552-1.756-1.486-.875-4.119.856-2.559.866-2.757.803-17.328-.076-17.866.139-16.053-2.342-19.767-1.466-2.195-1.48-2.235-.962-2.753.954-.954 2.157-1.321 4.079-1.244 2.472.099 5.47.073 12.833-.112 10.229-.256 11.41-.215 13.397.462M96.17 42.83c-.175.175-.58.866-.9 1.536-1.122 2.347-1.966 2.683-3.863 1.535-2.733-1.653-3.483-1.864-7.74-2.17-6.983-.502-8.108.327-8.292 6.102-.247 7.792 2.712 9.969 8.708 6.409 3.234-1.921 5.018-1.915 6 .019.475.934.493 5.805.027 7.315-.824 2.672-2.703 3.087-5.32 1.176-4.704-3.435-8.573-2.768-9.282 1.601-.234 1.443-.225 9.061.013 10.18.74 3.493 4.115 5.046 9.539 4.389 4.917-.595 6.116-1.213 8.285-4.272 1.151-1.624 1.89-2.338 3.341-3.233.993-.612 1.058-.73 1.632-2.958 1.119-4.346 2.221-6.003 5.179-7.791 2.452-1.481 3.659-3.657 3.714-6.693.039-2.173-.654-3.272-5.572-8.843-3.542-4.012-4.783-4.988-5.469-4.302m79.08.15c-2.759.721-3.274 2.025-3.459 8.77-.222 8.111.233 9.348 3.427 9.32 3.88-.034 5.31-.908 7.623-4.653 2.345-3.798 2.577-5.945.981-9.106-1.433-2.838-5.812-5.051-8.572-4.331m46.314 10.587c-1.509.702-2.118 1.897-2.744 5.375-.821 4.565.204 5.975 4.342 5.975 4.488 0 5.159-1.802 2.992-8.03-1.135-3.263-2.536-4.276-4.59-3.32" fill="#26252b"/></svg>',
  amazon: '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="603" height="182" fill="#221f1f"><path fill="#f90" d="M374 142a234 234 0 0 1-287-21c-4-3-1-7 3-4a318 318 0 0 0 279 17c6-3 11 4 5 8"/><path fill="#f90" d="M389 126c-5-6-30-3-41-2-4 1-4-2-1-5 20-14 53-10 57-5 3 5-1 38-20 54-3 2-6 1-5-3 5-10 14-34 10-39"/><path d="M348 20V6c0-2 2-3 4-3h61c2 0 4 1 4 3v12l-5 9-32 45c12 0 25 1 35 8 3 1 3 3 4 5v14c0 2-3 5-5 4a71 71 0 0 0-65 0c-2 1-4-1-4-3V86c0-3 0-6 2-10l37-52h-32c-2 0-4-2-4-4m-223 85h-19c-1 0-3-1-3-3V7c0-2 2-4 4-4h17c2 0 3 2 3 3v13h1c4-12 13-18 24-18 12 0 19 6 24 18 5-12 15-18 26-18 8 0 17 3 22 11 6 8 4 19 4 30v60c0 2-1 3-3 3h-19c-2 0-3-1-3-3V51l-1-18c-1-6-5-8-11-8-4 0-9 3-11 8s-1 13-1 18v51c0 2-2 3-4 3h-19c-2 0-3-1-3-3V51c0-10 2-26-12-26-13 0-12 15-12 26v51c0 2-2 3-4 3M470 1c27 0 42 24 42 54 0 29-16 52-42 52-28 0-42-23-42-53s15-53 42-53m0 20c-14 0-15 18-15 30s0 37 15 37c14 0 15-20 15-33 0-8-1-17-3-25-2-7-6-9-12-9m78 84h-19c-1 0-3-1-3-3V6c0-1 2-3 4-3h17c2 0 3 1 3 3v14h1c5-13 12-19 25-19 8 0 17 3 22 11s5 21 5 30v60c-1 2-2 3-4 3h-19c-1 0-3-1-3-3V50c0-10 1-25-12-25-4 0-8 3-10 7-3 6-3 12-3 18v52c0 2-2 3-4 3"/><use xlink:href="#a" transform="translate(244)"/><path id="a" d="M55 60v-4c-13 0-27 3-27 18 0 9 4 14 11 14 5 0 10-3 13-8 3-7 3-13 3-20m19 45-4 1c-7-6-8-8-11-13-10 11-17 14-31 14-15 0-28-10-28-29 0-15 9-26 20-31 10-4 24-5 35-6v-3c0-4 1-9-2-13-2-4-7-5-10-5-8 0-14 4-15 11-1 2-2 4-4 4L6 33c-1-1-3-2-3-4C8 7 27 0 45 0c9 0 21 3 28 10 9 8 8 19 8 32v29c0 8 4 12 7 17 2 2 2 4 0 5l-14 12"/></svg>',
}
function prepareActionBar() {
  // TODO: Add settings button with dropdown or overlay for setting custom userOptions
  const site = matcher.site.toLowerCase();
  if (!document.body || !userOptions[site]) return;
  document.body.addEventListener('mousemove', () => {
    mouseOver = true;
    if (timeout) clearTimeout(timeout);
    timeout = setTimeout(() => {
      mouseOver = false;
    }, 2200);
  });
  document.body.insertAdjacentHTML('afterbegin',
    `
    <div class="cu-settings">
      <div class="cu-settings-container">
        <div class="cu-settings-description">
          ${svg[site] ?? ''}
          Chrome Extension: Utility - Settings for ${matcher.site}:
        </div>
        <div class="cu-settings-options">

        </div>
      </div>
    </div>
    <div class="cu-actions-container cu-hide ${site}">
      <button class="cu-action">
        ${svg['settingsIcon']}
      </button>
    </div>`
  );
  const actionBar = document.querySelector('.cu-actions-container');
  const settingsBtn = actionBar.querySelector('button');
  settingsOverlay = document.querySelector('.cu-settings');
  const mouseOverListener = new Interval(() => {
    if (mouseOver) {
      actionBar.classList.remove('cu-hide');
    } else {
      actionBar.classList.add('cu-hide');
    }
  }, 300, false);
  actionBar.addEventListener('mouseenter', () => {
    mouseOver = true;
    mouseOverListener.pause();
  });
  actionBar.addEventListener('mouseleave', () => {
    mouseOver = false;
    mouseOverListener.play();
  });
  let settingsToggle = false;
  settingsBtn.addEventListener('click', () => {
    settingsToggle = !settingsToggle;
    if (settingsToggle) {
      // show options
      renderOptions();
      settingsOverlay.classList.add('cu-slide-in');
    }
    else settingsOverlay.classList.remove('cu-slide-in');
  });
  const color = getDesign(site);
  insertCSS(`
    .cu-actions-container::before, .cu-actions-container::after {
      content: '';
      width: 50px;
      height: 30px;
      background-color: inherit;
      position: absolute;
      left: -9px;
      top: -19px;
      transform: rotate(-25deg);
      border-left: 1px solid white;
      z-index: 1;
    }

    .cu-settings {
      position: fixed;
      width: 100vw;
      height: 100vh;
      background: #0000008a;
      z-index: 9999999;
      transform: translateY(-100%);
      transition: 0.5s;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .cu-slide-in {
      transform: translateY(0%);
    }

    .cu-actions-container::after {
      left: unset;
      right: -9px;
      transform: rotate(25deg);
      border-right: 1px solid white;
      border-left: unset;
    }

    .cu-actions-container {
      position: fixed;
      top: 0;
      left: 50%;
      transform: translateX(-50%);
      height: 20px;
      background-color: white;
      z-index: 100;
      border-bottom: 1px solid white;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 100000000;
      box-shadow: 1px 1px 11px #000;
    }
    .cu-actions-container.cu-hide {
      display: none;
    }
    .cu-actions-container.twitch {
      left: 70%;
    }
    .cu-actions-container.crunchyroll {
      right: 200px;
      left: unset;
    }
    @media (min-width:1500px) {
      .cu-actions-container.crunchyroll {
        right: 40%;
      }
    }

    .cu-action {
      height: 100%;
      position: relative;
      background: white;
      border-color: transparent;
      fill: black;
      display: flex;
      border-radius: 5px;
      justify-content: center;
      align-items: center;
      padding: 0 5px;
      z-index: 2;
    }

    .cu-settings-container {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      height: 100%;
      font-size: 20px;
      gap: 50px;
      font-family: system-ui;
      color: ${color.primary};
      width: fit-content;
      height: fit-content;
      padding: 50px;
      background: #fff;
    }
    .cu-settings-container h3, .cu-settings-container p {
      font-size: 30px;
      margin: 0;
      padding: 5px 0;
      line-height: 1;
    }
    .cu-settings-container p {
      font-size: 24px;
      color: ${color.secondary};
    }
  
  
    .cu-settings-description {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 15px;
    }

    .cu-settings-options {
      display: flex;
      flex-direction: column;
      gap: 15px;
      max-height: 100%;
      overflow: auto;
      width: fit-content;
      align-items: center;
    }
    .cu-feature {
      width: 100%;
    }
    .cu-action-row {
      display: flex;
      gap: 12px;
      padding: 7px 10px;
      width: fit-content;
      user-select: none;
      font-size: 19px;
      line-height: 0.9;
    }
    .cu-action-row label {
      margin: 0;
      font-weight: 400;
    }
    .cu-disabled .cu-action-row label {
      border-bottom: 1px dotted;
    }
    .cu-feature-row {
      max-width: 80%;
      width: fit-content;
    }

    .cu-disabled {
      color: #b97777;
    }

    .cu-subfeatures .cu-action-row {
      font-size: 18px;
      gap: 15px;
      padding: 5px 0 5px 30px;
    }
  `, 'cu-actions');
}

function renderOptions() {
  const site = matcher.site.toLowerCase();
  const options = userOptions[site];
  const settingsEl = settingsOverlay.querySelector('.cu-settings-options');
  settingsEl.innerHTML = '';
  if (options) {
    Object.entries(options).forEach(([key, value]) => {
      const featureSelector = key;
      const feature = Object.assign({}, value);
      const featureName = feature.featureName;
      const featureDescription = feature.featureDescription;
      delete feature.featureName;
      delete feature.featureDescription;
      const featureRow = document.createElement('div');
      const featureContainer = document.createElement('div');
      const rows = document.createElement('div');
      featureContainer.classList.add('cu-feature');
      rows.classList.add('cu-feature-rows');
      featureRow.classList.add('cu-feature-row');
      if (featureName) {
        const featureTitleEl = document.createElement('h3');
        featureTitleEl.textContent = featureName;
        featureContainer.appendChild(featureTitleEl);
      }
      if (featureDescription) {
        const featureDescEl = document.createElement('p');
        featureDescEl.textContent = featureDescription;
        featureContainer.appendChild(featureDescEl);
      }

      Object.entries(feature).forEach(([k, v]) => {
        renderFeatureRow(featureRow, k, v, [site, featureSelector]);
      });
      rows.appendChild(featureRow);
      featureContainer.appendChild(rows);
      settingsEl.appendChild(featureContainer);
    });
  }
}

// gets first non-object value of accessorArray, manipulates given accessorArray
function getNestedValue(obj, accessorArray) {
  const val = obj[accessorArray.shift()];
  return typeof val === 'object' ? getNestedValue(val, accessorArray) : val;
}

function renderFeatureRow(featureRow, key, value, optKeys, isDisabled) {
  const feature = value;
  if (feature.hideFromUser) return;
  const row = document.createElement('div');
  row.classList.add('cu-action-row');
  const input = document.createElement('input');
  input.setAttribute('type', 'checkbox');
  const id = 'cu-' + optKeys.join('-');
  input.setAttribute('id', id);
  let tooltip = feature.description;
  if (feature.disabled || isDisabled) {
    input.setAttribute('disabled', true);
    tooltip = feature.disabledReason ?? '';
    input.setAttribute('disabled', true);
    if (feature.disabledReason) featureRow.classList.add('cu-disabled');
  }
  featureRow.setAttribute('title', tooltip);
  input.checked = feature.value;
  input.addEventListener('change', (event) => {
    event.preventDefault();
    event.stopPropagation();
    if (optKeys.length === 3) {
      // todo: Make nested userOption Access dynamic
      // getNestedValue(userOptions, [...optKeys]).value
      userOptions[optKeys[0]][optKeys[1]][optKeys[2]]['subFeatures'][key].value = input.checked;
      if (defaultSettings[optKeys[0]][optKeys[1]][optKeys[2]]['subFeatures'][key].toggle) {
        defaultSettings[optKeys[0]][optKeys[1]][optKeys[2]]['subFeatures'][key].toggle();
      }
    } else if (optKeys.length === 2) {
      userOptions[optKeys[0]][optKeys[1]][key].value = input.checked;
      if (defaultSettings[optKeys[0]][optKeys[1]][key].toggle) {
        defaultSettings[optKeys[0]][optKeys[1]][key].toggle();
      }
    }
    if (feature.subFeatures) { // TODO: use input.checked and subfeature inputs, to check if really necessary
      renderOptions();
    }
    saveUserSettings();
  }, true);
  const label = document.createElement('label');
  label.textContent = feature.label;
  label.setAttribute('for', id);

  row.appendChild(input);
  row.appendChild(label);
  featureRow.appendChild(row);
  if (feature.subFeatures) {
    const subrows = document.createElement('div');
    subrows.classList.add('cu-subfeatures');
    Object.entries(feature.subFeatures).forEach(([kk, vv]) => {
      renderFeatureRow(subrows, kk, vv, [...optKeys, key], feature.disabled || !feature.value);
    });
    featureRow.appendChild(subrows);
  }
}

function loadUserSettings() {
  let opt = window.localStorage.getItem('Chrome:Utility:userOptions');
  if (!opt) return;
  opt = JSON.parse(opt);
  if (opt.version !== userOptions.version) {
    /**
     * TODO: Toastr message to inform user about new version and changes
     */
    /**
     * TODO: Apply values of saved options when new version is used
     * cant use Object.assign, since it will overwrite userOptions with opt strings and values,
     * while i may want to change them, so i should implement it so it only copies the "value" field
     */

    window.localStorage.removeItem('Chrome:Utility:userOptions');
    return;
  }
  Object.assign(userOptions, opt);
}
function saveUserSettings() {
  window.localStorage.setItem('Chrome:Utility:userOptions', JSON.stringify(userOptions));
}

function intervalHandler() {
  window.addEventListener('blur', whenLeavingTab);
  window.addEventListener('beforeunload', whenLeavingTab, { capture: true });
  document.addEventListener('mouseleave', whenMouseLeavesWindow);
  window.addEventListener('focus', whenFocusingTab);
}
function whenMouseLeavesWindow() {
  console.log(red('Mouse is Leaving Browser-Window'));
  saveUserSettings();
}
function whenLeavingTab() {
  console.log(red('Leaving Tab'));
  saveUserSettings();
  stopIntervals();
}
function whenFocusingTab() {
  console.log(green('Returning to Tab'));
  resumeIntervals();
}
function stopIntervals(includeAllIntervals = false) {
  const intervals = includeAllIntervals ? registeredIntervals : registeredIntervals.filter(reg => reg.pauseInBg);
  for (const reg of intervals) {
    if (reg.pauseInBg && reg.playCondition() && !reg.finished) reg.pause();
  }
}
function resumeIntervals(includeAllIntervals = false) {
  const intervals = includeAllIntervals ? registeredIntervals : registeredIntervals.filter(reg => reg.pauseInBg);
  for (const reg of intervals) {
    if (reg.pauseInBg && reg.playCondition() && !reg.finished) reg.play();
  }
}

class Matcher {
  constructor(match, fix, hasActions = false, site = '') {
    this.match = match;
    this.fix = fix;
    this.hasActions = hasActions;
    this.site = site ? site : fix.name.replace('fix', '');
  }
}

let matcher = '';
// TODO: Make WebsiteMatcher a Listener or something for websites where location is changed programmatically (react, angular, etc.)
function websiteSelector() {
  const websiteMatcher = [
    new Matcher('wiki.fextralife.com', fixFextralife, true),
    new Matcher('twitch.tv', fixTwitch, true),
    new Matcher('crunchyroll.com', fixCrunchyroll, true),
    new Matcher('defenestration.co/pg/surveying', fixPGSurveyHelper),
    new Matcher('youtube.com', fixYoutube),
    new Matcher('netflix.com', fixNetflix, true),
    new Matcher('1movies.life', fix1movies, true),
    new Matcher('amazon.de', fixAmazon, true),
    new Matcher('playerwatchlm24.xyz', fixPlayerWatch24, true),
  ];
  const match = websiteMatcher.find(v => location.href.includes(v.match));
  fixForAllWebsites();
  if (!match) return console.log(yellow(`no utility fix for this website found`));;
  matcher = match;
}
function startFixing() {
  console.log(yellow(`starting process ${matcher.fix.name}`));
  if (matcher.hasActions) prepareActionBar();
  matcher.fix();
}
// fixPlayerWatch24
function fixPlayerWatch24() {
  startGettingInformation();
  insertCSS('.telegram-link {display:none}');
  autoplayPW24();
  initVolumeManager();
}

function autoplayPW24() {
  const play = localStorage.getItem('autoplayVideo');
  if (play) {
    localStorage.removeItem('autoplayVideo');
    const condition = () => document.querySelector('#video_player video');
    repeatUntilCondition(() => {
      const video = condition();
      const continueWatching = document.querySelector('.continue__controls-wrapper button');
      if (video) {
        video.play();
      }
      if (continueWatching) {
        continueWatching.click();
      }
    }, condition);
  }
}
let PW24_seasons = 0;
let PW24_curr_season = 0;
let PW24_total_Episodes_This_Season = 0;
let PW24_curr_episode = 0;
function startGettingInformation(callback) {
  if (!PW24_seasons) {
    return getInfo('seasons', callback);
  } else if (!PW24_total_Episodes_This_Season) {
    return getInfo('episodes', callback);
  }
  console.log(PW24_seasons, PW24_total_Episodes_This_Season);
  if (callback) callback();
  else enableNextEpisodeHotkey_NV();
}

function resetInfoPW24() {
  PW24_seasons = 0;
  PW24_curr_season = 0;
  PW24_total_Episodes_This_Season = 0;
  PW24_curr_episode = 0;
}

function store(key, value = undefined) {
  const val = value === null ? null : (value ?? true);
  localStorage.setItem(key, JSON.stringify(val));
}

function load(key) {
  const item = localStorage.getItem(key);
  return item ? JSON.parse(item) : null;
}

function initVolumeManager() {
  const condition = () => document.querySelector('#video_player video');
  repeatUntilCondition(() => {
    const videoEl = condition();
    const volume = load('volume');

    if (volume !== null) {
      videoEl.volume = volume;
    }

    videoEl.addEventListener('volumechange', () => {
      store('volume', videoEl.volume);
    });
  }, condition)
}

nHotKey = null;
function enableNextEpisodeHotkey_NV() {
  if (nHotKey) return;
  nHotKey = window.addEventListener('keydown', (event) => {
    if (event.key === 'n') {
      resetInfoPW24();
      startGettingInformation(() => {
        const isLastEpOfSeason = PW24_curr_episode === PW24_total_Episodes_This_Season;
        const isLastSeason = PW24_curr_season === PW24_seasons;
        const nextEpisodeId = isLastEpOfSeason ?
          (!isLastSeason ? curbEnthusiasm[PW24_curr_season][0] : '') :
          curbEnthusiasm[PW24_curr_season-1][PW24_curr_episode];

        location.hash = nextEpisodeId;
        store('autoplayVideo');
        location.reload();
      });
    } else if (event.key === 'v') {
      resetInfoPW24();
      startGettingInformation(() => {
        const isFirstEpOfSeason = PW24_curr_episode === 1;
        const isFirstSeason = PW24_curr_season === 1;
        const nextEpisodeId = isFirstEpOfSeason ?
          (!isFirstSeason ? curbEnthusiasm[PW24_curr_season-2][curbEnthusiasm[PW24_curr_season-2].length-1] : '') :
          curbEnthusiasm[PW24_curr_season-1][PW24_curr_episode-2];
  
        location.hash = nextEpisodeId;
        store('autoplayVideo');
        location.reload();
      });
    }
  });
}

function getInfo(key, cb) {
  const isLoadedYet = (/[0-9]/).test(document.querySelector('.seasons-switcher span')?.textContent);
  if (!isLoadedYet) return setTimeout(() => startGettingInformation(cb), 100);
  const baseKey = '.' + key + '-switcher';
  document.querySelector(baseKey).click();
  setTimeout(() => {
    const count = document.querySelectorAll(baseKey + ' .' + key + ' li').length;
    const countCurr = +document.querySelector(baseKey + ' span').textContent.replace(/[^0-9]/g, '');
    if (key === 'seasons') {
      PW24_curr_season = countCurr;
      PW24_seasons = count;
    } else if (key === 'episodes') {
      PW24_curr_episode = countCurr;
      PW24_total_Episodes_This_Season = count;
    }
    document.querySelector(baseKey).click();
    startGettingInformation(cb);
  });
}

// 1movies
function fix1movies() {
  reloadUntilVideoAvailable();
  insertCSS(`
  .cu-dark-mode #episodes a {
    background-color: #2a2a21 !important;
  }
  body.cu-dark-mode {
    background-color: #2a2a21 !important;
    color: white;
  }
  .cu-dark-mode #episodes .episode:not(.active) * {
      color: #fff !important;
  }
  .cu-dark-mode #episodes .episode.active * {
      color: #aeffbf !important;
  }
  .cu-dark-mode #player_in_tab {
      background-color: #2a2a21 !important;
  }
  .cu-dark-mode .bg_true {
      background-color: #2a2a21 !important;
  }
  .cu-dark-mode #general {
      background-color: #2a2a21 !important;
  }
  .cu-dark-mode .clearfix.main_desc {
      background-color: #161615 !important;
  }
  .cu-dark-mode li#actors {
      background-color: #161615 !important;
  }
  .cu-dark-mode .wrap_pad.actor * {
      background-color: #161615 !important;
      color: #fff;
  }
  .cu-dark-mode .wrap_pad.actor {
      outline: 1px #4a4a4a solid !important;
  }
  .cu-dark-mode div#comments {
      background-color: #161615 !important;
  }
  .cu-dark-mode textarea#comment_body {
      background-color: #161615 !important;
      box-shadow: 0 0.2rem 0.4rem #544747 !important;
  }
  .cu-dark-mode .keywords {
      background-color: #161615 !important;
  }
  .cu-dark-mode ul.tabs li {
      background-color: #161615 !important;
  }
  .cu-dark-mode .add_padd_new {
      background-color: #161615 !important;
  }
  .cu-dark-mode .media_wrap {
      background-color: #161615 !important;
  }
  .cu-dark-mode div#addthis_wrapper {
      background-color: #2e2e2d !important;
  }
  .cu-dark-mode .c_hr {
      background-color: #2e2e2d !important;
  }
  .cu-dark-mode div#mCSB_1_dragger_vertical {
      background-color: #161615 !important;
  }
  .cu-dark-mode .mCSB_draggerContainer {
      background-color: #161615 !important;
  }
  .cu-dark-mode ul.tabs {
      background-color: #161615 !important;
  }
  .cu-dark-mode div#mCSB_1 {
      background-color: #2a2a21 !important;
  }
  .cu-dark-mode li.selected.content_tab {
      background-color: #2a2a21 !important;
  }
  .cu-dark-mode #scroll_block_schedule * {
      background-color: #2a2a21 !important;
      color: #fff;
  }
  .cu-dark-mode #scroll_block_schedule > div > div > div > div.right_part {
      border-bottom: 2px solid #fff !important;
  }
  .cu-dark-mode #player_wrapper {
      background-color: #2a2a21 !important;
  }
  `);
  toggleDarkMode1Movies();
  rememberVideoPosition();
}
const toggleDarkMode1Movies = function () {
  const isActive = isAllowed(userOptions['1movies'].featureDarkMode.isEnabled);
  isActive ? document.body.classList.add('cu-dark-mode') : document.body.classList.remove('cu-dark-mode');
}
calledOnce = new Set();
function calledBefore(id) {
  return calledOnce.has(id);
}
async function cleanDB() {
  await indexedDB.databases().then(dbs => {
    var promises = dbs.map(db => {
      return new Promise((resolve, reject) => {
        var req = indexedDB.deleteDatabase(db.Name);
        req.onsuccess = resolve;
        req.onerror = reject;
        req.onblocked = reject;
      });
    });
    return Promise.all(promises).then(console.log).catch(console.error);
  })
}
async function cleanCache() {
  localStorage.clear();
  sessionStorage.clear();
  await cleanDB();
  // no access to cookies
  saveUserSettings();
}
function reloadUntilVideoAvailable() {
  const selfId = 'reloadUntilVideoAvailable';
  if (!isAllowed(userOptions["1movies"].featureReload.isEnabled) && !calledBefore(selfId)) return;
  else calledOnce.add(selfId);
  const reloadNecessary = () => document.querySelector('#player_in_tab .left > .open:nth-child(1)');
  repeatUntilCondition(function untilVideo() {
    if (reloadNecessary()) {
      cleanCache();
      window.location.reload();
    }
  }, reloadNecessary);
}
function rememberVideoPosition() {
  if (!isAllowed(userOptions["1movies"].featureRememberVideoPosition)) return;
}

// Amazon
let amazonSkipLoop = null;
const getAmazonSkipRecapBtn = () => document.querySelector('.dv-player-fullscreen [class*="nextupcard-wrapper"]~div button');
const getAmazonSkipAdvertBtn = () => document.querySelector('.dv-player-fullscreen .atvwebplayersdk-infobar-container > div > div:nth-child(3) > div:nth-child(2)');
function toggleAmazonSkip() { !amazonSkipLoop.isPlaying ? amazonSkipLoop.play() : amazonSkipLoop.pause() }
function fixAmazon() {
  const condition = () => getAmazonSkipAdvertBtn() || getAmazonSkipRecapBtn();
  amazonSkipLoop = repeatIfCondition(skipAmazonRecap, condition, [], false);


  // repeat until video is playing (dont execute on amazon normal view)
  // TODO: change to repeatif pattern, to be executed once, whenever a video is started, removing the eventlisteners
  
  repeatUntilCondition(
    () => {
      immidiatlyRemoveUiWhenLeavingMouse();
    },
    () => {
      const atvEl = document.querySelector('.atvwebplayersdk-overlays-container');
      return atvEl && getComputedStyle(atvEl).cursor === 'default';
    }
  );
}

function cleanupATV() {
  document.removeEventListener('mouseleave', toggleRemove);
  document.removeEventListener('mouseenter', toggleAdd);
}

const toggleUIVisible = (op) => {
  // const subtitlesEl = document.querySelector('.atvwebplayersdk-overlays-container > div:nth-child(5) > div > div');
  const topActionBarEl = document.querySelector('.atvwebplayersdk-overlays-container > div:nth-child(5) > div > div:nth-child(2)');
  const bottomActionBarEl = document.querySelector('.atvwebplayersdk-bottompanel-container');
  const opacityOverlayEl = document.querySelector('.atvwebplayersdk-overlays-container > div');
  const centerActionsEl = document.querySelector('.atvwebplayersdk-overlays-container > div:nth-child(4) > div:nth-child(2)');

  [topActionBarEl, bottomActionBarEl, opacityOverlayEl, centerActionsEl].filter(e=>!!e).forEach(e => 
    op === 'remove' ? e.classList.add('cu-hide') : e.classList.remove('cu-hide'));
};
const toggleAdd = () => stackEnd(toggleUIVisible('add'));
const toggleRemove = () => stackEnd(toggleUIVisible('remove'));
function immidiatlyRemoveUiWhenLeavingMouse() {
  insertCSS('.cu-hide { display: none !important; }');
  document.addEventListener('mouseleave', toggleRemove);
  document.addEventListener('mouseenter', toggleAdd);
}

function stackEnd(fn) {
  setTimeout(fn,1);
}

function skipAmazonRecap() {
  if (!isAllowed(userOptions.amazon.featureAutoSkip.isEnabled)) return;
  const skipAdBtn = getAmazonSkipAdvertBtn();
  if (userOptions.amazon.featureAutoSkip.isEnabled.subFeatures.skipAdverts && skipAdBtn) return skipAdBtn.click();
  const skipRecapBtn = getAmazonSkipRecapBtn();
  if (userOptions.amazon.featureAutoSkip.isEnabled.subFeatures.skipRecaps && skipRecapBtn) return skipRecapBtn.click();
}

// Netflix
function fixNetflix() {
  // netflixApi();
  toggleAutoSkipIntro();
  repeatIfCondition(addAutoSkipIntroButton, getNetflixButtonContainer, [], false);
  netflixRestartWithSpaceKey();
}

/** if spacebar is pressed, restart if it is in restart-pause-mode */
function netflixRestartWithSpaceKey() {
  window.addEventListener('keyup', key => {
    if (key.code !== 'Space') return;
    const restartButton = document.querySelector('.watch-video--playback-restart button');
    if (restartButton) restartButton.click();
  })
}

/**
 * not used yet, but good to know, for future features
 */
function netflixApi() {
  return {};
  const state = window.netflix.appContext.state.playerApp.getState();
  if (!state) return {};
  const video = Object.values(state.videoPlayer.videoMetadata).find(v => v)._video._video;
  const playState = Object.values(state.videoPlayer.playbackStateBySessionId).find(v => v);
  // all info about playbackstate and video details are in these 2 consts
  return { video, playState, isMovie: video.type === 'movie' };
}

const getNetflixButtonContainer = () => document.querySelector('.watch-video--bottom-controls-container [data-uia="controls-standard"] > div > div:nth-child(3) > div > div:nth-child(3)');
function addAutoSkipIntroButton() {
  const featureIsTurnedOff = !isAllowed(userOptions.netflix.featureAutoSkip.skipButton);
  const hideForMovies = netflixApi()?.isMovie && !isAllowed(userOptions.netflix.featureAutoSkip.skipButton.subFeatures.hideForMovies);
  if (featureIsTurnedOff || hideForMovies) return;
  const parent = getNetflixButtonContainer();
  if (!parent) return;
  const alreadyExists = parent.querySelector('.button-autoSkipToggle');
  if (alreadyExists) return;
  const copyChild = parent.children[1].cloneNode(true);
  copyChild.querySelector('.control-medium').insertAdjacentHTML('afterBegin', `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="svg-icon-nfplayerPause pauseButton"><path fill-rule="evenodd" clip-rule="evenodd" d="M4.5 3C4.22386 3 4 3.22386 4 3.5V20.5C4 20.7761 4.22386 21 4.5 21H9.5C9.77614 21 10 20.7761 10 20.5V3.5C10 3.22386 9.77614 3 9.5 3H4.5ZM14.5 3C14.2239 3 14 3.22386 14 3.5V20.5C14 20.7761 14.2239 21 14.5 21H19.5C19.7761 21 20 20.7761 20 20.5V3.5C20 3.22386 19.7761 3 19.5 3H14.5Z" fill="currentColor"></path></svg>`);
  const playButton = copyChild.querySelector('.control-medium svg:nth-child(2)');
  playButton.outerHTML = `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="playButton Hawkins-Icon Hawkins-Icon-Standard"><path fill-rule="evenodd" clip-rule="evenodd" d="M22 3H20V21H22V3ZM4.28615 3.61729C3.28674 3.00228 2 3.7213 2 4.89478V19.1052C2 20.2787 3.28674 20.9977 4.28615 20.3827L15.8321 13.2775C16.7839 12.6918 16.7839 11.3082 15.8321 10.7225L4.28615 3.61729ZM4 18.2104V5.78956L14.092 12L4 18.2104Z" fill="currentColor"></path></svg>`;
  copyChild.classList.add('button-autoSkipToggle');
  if (userOptions.netflix.featureAutoSkip.isEnabled.value) {
    autoSkipInterval.play();
    copyChild.classList.add('stop');
    copyChild.setAttribute('title', "stop skipping Intro/Outro automatically");
  } else {
    copyChild.setAttribute('title', "start skipping Intro/Outro automatically");
  }
  insertCSS(
    `
      .button-autoSkipToggle .pauseButton {
        display: none;
    }
      .button-autoSkipToggle .playButton {
        display: block;
    }
      .button-autoSkipToggle .playButton path {
        fill: green;
    }
      .button-autoSkipToggle .pauseButton path {
        fill: red;
    }
      .button-autoSkipToggle.stop .pauseButton {
        display: block;
    }
      .button-autoSkipToggle.stop .playButton {
        display: none;
    }
    `, 'skipIntroButton'
  )
  copyChild.onclick = () => {
    toggleAutoSkipIntro(copyChild);
  };
  parent.insertBefore(copyChild, parent.children[0]);
}

const autoSkipInterval = new Interval(skip, 100, false, () => !isAllowed(userOptions.netflix.featureAutoSkip.isEnabled.value), false);
function toggleAutoSkipIntro(el = document.querySelector('.button-autoSkipToggle')) {
  if (!el) return;
  if (autoSkipInterval.isPlaying) {
    el.classList.remove('stop');
    autoSkipInterval.pause();
    userOptions.netflix.featureAutoSkip.isEnabled.value = false;
    saveUserSettings();
    el.setAttribute('title', "start skipping Intro/Outro automatically");
  } else {
    el.classList.add('stop');
    autoSkipInterval.play();
    userOptions.netflix.featureAutoSkip.isEnabled.value = true;
    saveUserSettings();
    el.setAttribute('title', "stop skipping Intro/Outro automatically");
  }
}
function skip() {
  const skipButton = document.querySelector('.watch-video--skip-content-button');
  const skipOutroButton = document.querySelector('[data-uia*="next-episode"]');
  if (skipButton && isAllowed(userOptions.netflix.featureAutoSkip.skipIntro)) {
    skipButton.click();
    console.log(green('skipped Intro'));
  }
  if (skipOutroButton && isAllowed(userOptions.netflix.featureAutoSkip.skipOutro)) {
    skipOutroButton.click();
    console.log(green('skipped Outro'));
    /**
     * extend info by giving video title, by finding the information in the netflix object...
     * TODO: Use netflix api info, for more detailled logs here
     */
  }
}

// YouTube
function fixYoutube() {
  const query = () => document.querySelectorAll('#top-level-buttons-computed ytd-button-renderer #text');
  const condition = () => query().length;
  repeatUntilCondition(fixShowingDateByRemovingTextFromIcons, condition, [query]);
}

function fixShowingDateByRemovingTextFromIcons(query) {
  query().forEach(e => e.innerText = '');
  console.log(green('successfully removed texts from icons next to likes to fix youtube date disappearing'));
}

// Project Gorgon
function fixPGSurveyHelper() {
  // currently only supporting motherloads
  addRemoveNodeInput();
  addNodeCounter();
  loadLastInput();
  saveLastInput();
}

function loadLastInput() {
  const inputs = Array.from(document.querySelectorAll('#motherlode_survey_input textarea'));
  inputs.forEach(input => {
    input.value = sessionStorage.getItem(input.id) || input.value;
  });
}
function saveLastInput() {
  const inputs = Array.from(document.querySelectorAll('#motherlode_survey_input textarea'));
  inputs.forEach(input => {
    input.addEventListener('input', () => {
      sessionStorage.setItem(input.id, input.value);
    });
  });
}

function addNodeCounter() {
  const inputs = Array.from(document.querySelectorAll('#motherlode_survey_input textarea'));
  inputs.forEach(el => {
    el.style.position = 'relative';
    const id = el.id.substr(-1);
    const counterId = 'counter_' + id;
    const counterHTML = `
    <div
      id="${counterId}"
    >Rows: x</div>
    `;
    el.insertAdjacentHTML('beforebegin', counterHTML);
    const counter = document.getElementById(counterId);
    el.addEventListener('input', () => {
      const count = el.value.split('\n').length;
      counter.textContent = 'Rows: ' + count;
    });
  });
}

function addRemoveNodeInput() {
  const inputHTML = `
  <div>
    <input id="node" type="number" min="1">
    <button id="remNodeButton">remove</button>
  </div>
  `;
  const target = document.getElementById('motherlode_survey_input');
  target.insertAdjacentHTML('beforebegin', inputHTML);

  const btn = document.getElementById('remNodeButton');
  const nodeInput = document.getElementById('node');
  btn.addEventListener('click', () => removeNode(nodeInput.value));
}

function removeNode(val) {
  const inputs = Array.from(document.querySelectorAll('#motherlode_survey_input textarea'));
  if (!inputs.length) return error('couldn\'t find inputs');
  const nrOfNodes = inputs[0].value.split('\n').length;
  const sameLen = inputs.every(v => v.value.split('\n').length === nrOfNodes);
  if (!sameLen) return info('Node A and B do not have the same length');
  inputs.map(v => {
    const x = v.value.split('\n');
    if (!val) return error('couldn\'t find inputs');
    if (val < 1 || val > nrOfNodes) return info('selected number of Node not in range');
    x.splice(val - 1, 1);
    v.value = x.join('\n');
  });
}

// Crunchyroll
function fixCrunchyroll() {
  autoplayNext();
  addHotkeysForNextAndPrevious();
}

function addHotkeysForNextAndPrevious() {
  window.addEventListener('keyup', ev => {
    if (ev.key === 'n') {
      document.querySelector('[data-t="next-episode"] a')?.click()
    } else if (ev.key === 'p') {
      document.querySelector('[data-t="prev-episode"] a')?.click()
    }
  });
}

function autoplayNext() {
  // feature disabled for now, since crunchyroll uses iframes...
  return;
  if (!isAllowed(userOptions.crunchyroll.featureAutoSkip.isEnabled)) return;
  const icon = addAutoplayInfoIcon();
  const video = document.querySelector('video');
  const nextVideo = document.querySelector('.c-playable-card-mini__link');
  if (!video || !nextVideo || !icon) return;
  icon.textContent = 'autoskip active';
  const skipAt = video.duration - userOptions.crunchyroll.featureAutoSkip.skipVideo.value;
  video.ontimeupdate = () => {
    if (video.duration >= skipAt) nextVideo.click();
  };
}
function addAutoplayInfoIcon() {
  const metaInfo = document.querySelector('.current-media-parent-ref');
  if (!metaInfo) return;
  const div = document.createElement('div');
  metaInfo.appendChild(div);
  return div;
}
// GlobalFix
function fixForAllWebsites() {
  const filetypeMatcher = [
    { filetype: '.png', fix: fixImages }
  ];
  const path = location.pathname;
  const filetype = path.slice(path.indexOf('.'));
  const match = filetypeMatcher.find(match => match.filetype === filetype);
  if (match) return match.fix();
}

function fixImages() {
  const zoom = () => document.body.classList.toggle('zoomed');
  const img = document.querySelector('img');
  img.addEventListener('click', zoom);
  img.click();
  insertCSS(`
    body.zoomed {
      height: unset !important;
    }
    .zoomed img {
      width: 100%;
      height: auto;
      overflow: auto;
    }
  `);
}

// Twitch
function fixTwitch() {
  collectViewBonusPointsAutomatically();
  adjustEmotePickerDimensions(); // TODO: make optional
  startListenerForOpenedPrimePanel();
  applyStyleFix();
  // adBlockTwitch(); TODO: Implement
  addListenerToQuicklyCheckPokemonReward();
}

const keyMap = {
  prevUpCalled: 0,
  prevDownCalled: 0,
  blockWhileExecuting: false,
  executionCounter: 0
};
function addListenerToQuicklyCheckPokemonReward() {
  // --TODO: Fix issue, key is stuck --- issue might be fixed idk
  const _listener = e => {
    const validKey = ['ShiftRight', 'ShiftLeft', 'Numpad9'].includes(e.code);
    if (!hasPokeballRewards() || !validKey || e.repeat) return;
  
    const up = e.type === 'keyup';
    keyMap[up ? 'prevUpCalled' : 'prevDownCalled'] = new Date().getTime();
    setTimeout(() => {
      // cancel automatic shift press by system, because numpad key used --- Microsoft issue: https://stackoverflow.com/questions/55339015/shift-key-released-when-pressing-numpad
      const cancel = up && e.key === 'Shift' && (new Date().getTime()-keyMap[!up ? 'prevUpCalled' : 'prevDownCalled']-10) < 5;
      if (!cancel) {
        keyMap[e.code] = !up;
        keyMap[up ? 'prevUpCalled' : 'prevDownCalled'] = new Date().getTime() - 10;
      } else {
        keyMap['prevUpCalled'] = 0;
        keyMap['prevDownCalled'] = 0;
      }
      if ((keyMap['ShiftLeft'] || keyMap['ShiftRight']) && keyMap['Numpad9']) {
        keyMap.executionCounter++;
        if (keyMap.blockWhileExecuting) return;
        keyMap.blockWhileExecuting = true;
        clickPokeballReward();
      }
    }, 10);
  };
  window.addEventListener('keydown', _listener);
  window.addEventListener('keyup', _listener);
}

function clickPokeballReward() {
  const channelPointRewardBtn = document.querySelector('[data-test-selector="community-points-summary"] button');
  if (!channelPointRewardBtn) return resetPokeballReward();
  channelPointRewardBtn.click();
  setTimeout(() => {
    const pokeballBtn = Array.from(document.querySelectorAll('.rewards-list > div')).find(e => e.textContent.includes('okeball'))?.querySelector('button');
    if (!pokeballBtn) return resetPokeballReward();
    pokeballBtn.click();
    setTimeout(() => {
      const redeemRewardBtn = document.querySelector('#channel-points-reward-center-body button');
      if (!redeemRewardBtn) return resetPokeballReward();
      redeemRewardBtn.click();
      if (keyMap.executionCounter > 0) {
        keyMap.executionCounter--;
        setTimeout(clickPokeballReward, 200);
      } else {
        keyMap.blockWhileExecuting = false;
      }
    }, 200);
  }, 200);
}

function resetPokeballReward() {
  keyMap.executionCounter = 0;
  keyMap.blockWhileExecuting = false;
}

function hasPokeballRewards() {
  // TODO: get this automatically
  return location.pathname.includes('umut_rre');
}

function adBlockTwitch() {
  new Interval(() => {
    const videoEl = document.querySelector('.video-player__container');
    if (!videoEl) return;
    videoEl.classList.remove('video-player__container--resize-calc');
    videoEl.firstElementChild.classList.remove('video-player--stream-display-ad');
  }, 300).play();
}

function applyStyleFix() {
  // move channel-point-reward-popup window to the right, so chat is still visible while, choosing the reward
  insertCSS(`
    [data-test-selector="community-points-summary"] + div > div > div {
      right: 88px !important;
      left: unset !important;
      bottom: -50px !important;
    }
  `, 'channel-point-popup');
}

let twitchPrimeRewardPanelIsOpened = false;
function startListenerForOpenedPrimePanel() {
  // listener, to add removeFeature to prime-reward-popup window
  // TODO#1: Add Information Bubbles on screen to inform how many items have been removed.
  // TODO#1: Below feature, add another feature, to filter rewards, by selecting a checkbox
  const listener = () => {
    const header = document.getElementById('PrimeOfferPopover-header');
    const isOpen = !!header;
    if (isOpen !== twitchPrimeRewardPanelIsOpened) {
      twitchPrimeRewardPanelIsOpened = isOpen;
      const alreadyAddedButton = document.querySelector('.dz-removeNonGameRewards');
      if (!alreadyAddedButton) addRemoveAllNonGamesButton(header);
    }
  }

  repeatIfCondition(listener)
}
function addRemoveAllNonGamesButton(el) {
  if (!el) return;
  const div = document.createElement('div');
  const [btn, btn2, btn3] = Array.from({length:3}, ()=>document.createElement('button'));
  btn.onclick = removeAllGames;
  btn2.onclick = removeAllNonGames;
  btn3.onclick = removeAllClaimed;
  div.classList.add('dz-removeNonGameRewards');
  btn.innerText = 'Games';
  btn2.innerText = 'Other';
  btn3.innerText = 'Claimed';
  div.prepend('remove', btn, btn2, btn3);
  el.prepend(div);
  insertCSS(`
    .dz-removeNonGameRewards {
      position: absolute;
      left: -90px;
      top: 5px;
      display: flex;
      flex-direction: column;
      z-index: 1;
      background: #1f1f23;
      padding: 8px;
      text-align: center;
      border-right: 1px dashed white;
    }
    .dz-removeNonGameRewards button {
      position: relative;
      padding: 1px 2px;
      display: block;
      outline: 1px solid white;
      margin: 0 10px 5px;
      color: black;
      background: antiquewhite;
    }
  `, undefined, true);
}

function removeAllNonGames() {
  Array.from(document.querySelectorAll('.prime-claim')).filter(el=>el.textContent != 'Claim Game').forEach(el => el.parentElement.previousElementSibling.querySelector('button')?.click());
}
function removeAllGames() {
  Array.from(document.querySelectorAll('.prime-claim')).filter(el=>el.textContent === 'Claim Game').forEach(el => el.parentElement.previousElementSibling.querySelector('button')?.click());
}
function removeAllClaimed() {
  Array.from(document.querySelectorAll('.prime-redeem__confirmation')).filter(el=>el.textContent === 'Claimed').forEach(el => el.closest('.prime-offer').querySelector('button')?.click());
}

const settingEl = () => document.querySelector('.emote-picker__search-content-dark .my-settings__popup');
let toggleMyOpt = () => settingEl().classList.toggle('hidden');
const myOpt = load('twitchOpt') || {h: 2.2, w:3.5, x: 2.5};
function adjustEmotePickerDimensions() {
  setEmotePopupCSS()

  // insertOptions
  const condition = () => document.querySelector('.emote-picker__search-content-dark > div');
  repeatUntilCondition(()=>{
    const insertTarget = condition();
    insertTarget.insertAdjacentHTML('afterend', `
    <button id="settingsEl" style="padding-left: 10px;">⚙️</button>
    <div class="my-settings__popup hidden">
      <span>adjust emote popup size</span>
      <span>height:<input type="range" min="10" max="50" id="myH" style="width: 82px;" value="${myOpt.h * 10}"></span>
      <span>width:<input type="range" min="10" max="50" id="myW" style="width: 82px;" value="${myOpt.w * 10}"></span>
      <span>icon size:<input type="range" min="10" max="50" id="myX" style="width: 82px;" value="${myOpt.x * 10}"></span>
    </div>
    `);
    setTimeout(()=>{
      const settingsEl = settingEl();
      const target = settingsEl.parentElement;
      target.querySelector('#settingsEl').onclick = toggleMyOpt;
      settingsEl.querySelectorAll('.my-settings__popup input').forEach(i => {
        i.onchange = (ev) => onChangeMyInput(ev);
      });
    });
  }, condition);
}

function onChangeMyInput(ev) {
  let val = Number.parseFloat(ev.target.value);
  if (!isNaN(val)) {
    const id = ev.srcElement.id.slice(-1).toLowerCase();
    val = val / 10;
    myOpt[id] = val;
    store('twitchOpt', myOpt);
    setEmotePopupCSS();
  }
}

function setEmotePopupCSS(opt = myOpt) {  
  // numbers are default values by twitch
  const height = (30.5 * opt.h) + 'rem!important';
  const width = (32 * opt.w) + 'rem!important';
  const emoteBtnHeight = (3.8 * opt.x) + 'rem!important';
  const emoteBtnWidth = (4 * opt.x) + 'rem!important';

  insertCSS(`
    .hidden { display: none!important }
    .chat-shell__expanded [direction="top-right"] { right: 330px; bottom: -50px; }
    .emote-picker { width: ${width}; max-width: calc(100vw - 330px); }
    .emote-picker .emote-picker__tab-content { height: ${height}; max-height: calc(100vh - 100px) }
    .emote-picker .emote-button { height: ${emoteBtnHeight}; width: ${emoteBtnWidth} }
    .emote-picker .emote-button > div { display: block !important }
    .emote-picker .emote-button > div .emote-button__link { height: 100%; width: 100% }
    .emote-picker .emote-button > div .emote-button__link img { max-height: unset; height: 100%; width: 100% }
    .emote-picker .emote-button > div .emote-button__link figure { width: 100%; height: 100% }

    .emote-picker .my-settings { padding-left: 10px; font-size: 17px }
    .emote-picker .my-settings__popup {
      display: flex;
      flex-direction: column;
      position: absolute;
      right: 50px;
      top: 50px;
      background: #564b4b;
      padding: 15px;
    }
    .emote-picker .my-settings__popup span {
      justify-content: space-between;
      display: flex;
    }
  `, 'emote-popup', true);
}

const viewBonusStats = { history: [] };
function collectViewBonusPointsAutomatically() {
  const btnClicker = () => {
    const streamer = location.pathname.substring(1);
    if (!streamer || !isAllowed(userOptions.twitch.featureAutoCollectReward.isEnabled)) return;
    console.log(blue('scanning, looking for clickable view rewards...'));
    const btn = document.querySelector('[class*="claimable-bonus"]')?.closest('button');
    if (btn) {
      const stamp = new Date();
      console.log(green('Points collected!' + reset(` (time: ${stamp.toLocaleString()})`)));
      viewBonusStats.history.push(stamp);
      btn.click();
    }
  };
  new Interval(btnClicker, 300, false);
}

// Fextralife
function fixFextralife() {
  fextralifeRemoveTwitchPlayer();
  fextraLifeAddSortIcon();
}

function isAllowed(opt) {
  return opt.value && !opt.disabled
}
// buggy... need to make independent of 4 cell per row
function fextraLifeAddSortIcon() {
  if (!location.href.includes('eldenring.wiki.fextralife.com/Spirit+Ashes')) return;
  if (!isAllowed(userOptions.fextralife.featureAddSortButton.isEnabled)) return;

  const tab = document.querySelector('.tabcontent');
  if (!tab) return;
  const tabChild = tab.firstElementChild;
  const button = document.createElement("div");
  const text = document.createTextNode('A-Z');
  button.appendChild(text);
  button.className = 'sortButton';
  const css = `
  .sortButton {
    position: absolute;
    border: 1px solid #870e0e;
    background: #8b712a;
    padding: 5px;
    border-radius: 50%;
    font-size: 0.9em;
    top: 0;
    left: 0;
    user-select: none;
  }
  .sortButton:hover {
    cursor: pointer;
  }
  `;
  const style = document.createElement('style');
  style.appendChild(document.createTextNode(css));
  document.head.appendChild(style);

  button.onclick = fextralifeSortAlphabetically;
  tab.style.position = 'relative';
  tab.insertBefore(button, tabChild);
  sortButton = button;
}
function fextralifeRemoveTwitchPlayer() {
  if (!isAllowed(userOptions.fextralife.featureRemoveMiniPlayer.isEnabled)) return;

  const wrapper = document.getElementById('wrapper');
  const sidebar = document.getElementById('sidebar-wrapper');

  wrapper.style.paddingLeft = '5px';
  sidebar.remove();
}
function fextralifeSortAlphabetically() {
  ascending = !ascending;
  sortButton.textContent = ascending ? 'Z-A' : 'A-Z';
  const match = document.querySelector('.tabcontent .row');
  if (!match) return;
  console.log('sorting...');
  const original = Array.from(document.querySelectorAll('.tabcontent .row')).map(v => Array.from(v.querySelectorAll('.wiki_tooltip'))).filter(v => v && v.length);
  const aTagsSorted = original.flat(1).sort((a, b) => {
    const textA = a.textContent.trim()[0];
    const textB = b.textContent.trim()[0];
    if (!textA || !textB) return 0;
    return ascending ? (textA.charCodeAt() - textB.charCodeAt()) : textB.charCodeAt() - textA.charCodeAt();
  });
  const aTags = Array.from({ length: original.length }, (_, i) => Array.from({ length: original[i].length }, () => null));
  let k = 0;
  for (let i = 0; i < original.length; i++) {
    for (let j = 0; j < original[i].length; j++) {
      aTags[i][j] = aTagsSorted[k].outerHTML;
      k++;
    }
  }
  original.forEach((v, i) => {
    v.forEach((a, j) => {
      a.outerHTML = aTags[i][j];
    })
  })
}

// console coloring
const Log = {
  reset: "\x1b[0m",
  bright: "\x1b[1m",
  dim: "\x1b[2m",
  underscore: "\x1b[4m",
  blink: "\x1b[5m",
  reverse: "\x1b[7m",
  hidden: "\x1b[8m",
  // Foreground (text) colors
  fg: {
    black: "\x1b[30m",
    red: "\x1b[31m",
    green: "\x1b[32m",
    yellow: "\x1b[33m",
    blue: "\x1b[34m",
    magenta: "\x1b[35m",
    cyan: "\x1b[36m",
    white: "\x1b[37m",
    crimson: "\x1b[38m"
  },
  // Background colors
  bg: {
    black: "\x1b[40m",
    red: "\x1b[41m",
    green: "\x1b[42m",
    yellow: "\x1b[43m",
    blue: "\x1b[44m",
    magenta: "\x1b[45m",
    cyan: "\x1b[46m",
    white: "\x1b[47m",
    crimson: "\x1b[48m"
  }
};
const red = text => `${Log.fg.red}${text}${Log.reset}`;
const purple = text => `${Log.fg.magenta}${text}${Log.reset}`;
const yellow = text => `${Log.fg.yellow}${text}${Log.reset}`;
const green = text => `${Log.fg.green}${text}${Log.reset}`;
const blue = text => `${Log.fg.blue}${text}${Log.reset}`;
const reset = text => `${Log.reset}${text}`;

function error(val) {
  console.error('Utility.js Error: ' + val);
}
function info(val) {
  console.warn(val);
}

// Options
// globalVars
let ascending = false;
let sortButton;
let getInterval = (name) => registeredIntervals.find(reg => reg.handler.name === name);
let userOptions = { // key must be match.site (saved as matcher globally)
  version: 1.004,
  '1movies': {
    featureDarkMode: {
      featureName: 'DarkMode',
      featureDescription: 'this feature will turn on/off Dark Mode',
      isEnabled: {
        value: false,
        label: 'Activate',
        description: 'turn DarkMode on or off',
        toggle: toggleDarkMode1Movies
      }
    },
    featureReload: {
      featureName: 'Automatic Reload',
      featureDescription: 'turn on automatic reloading of page, whenever service unavailable, until servers are available again',
      isEnabled: {
        value: false,
        label: 'Activate',
        description: '',
        toggle: reloadUntilVideoAvailable
      }
    },
    featureRememberVideoPosition: {
      featureName: 'Remember Video Position',
      featureDescription: '... and resume where you left off',
      isEnabled: {
        value: false,
        disabled: true,
        disabledReason: 'will be coming soon, not yet implemented',
        label: 'Activate',
        description: ''
      }
    }
  },
  amazon: {
    featureAutoSkip: {
      featureName: 'AutoSkip',
      featureDescription: 'automatically skip Intro, Recaps and Adverts',
      isEnabled: {
        value: true,
        label: 'Activate',
        description: 'turn skipping on or off',
        toggle: toggleAmazonSkip,
        subFeatures: {
          skipRecaps: {
            value: true,
            label: 'Recaps',
            description: 'will skip Intros / Recaps at the beginning of Videos'
          },
          skipAdverts: {
            value: true,
            label: 'Adverts',
            description: 'will skip Adverts that play before Videos'
          },
        }
      }
    }
  },
  fextralife: {
    featureRemoveMiniPlayer: {
      featureName: 'RemoveMiniPlayer',
      featureDescription: 'removes the annoying mini twitch player that appears on every single wiki page',
      isEnabled: {
        value: true,
        label: 'Activate',
        description: 'disable the annoying mini-Twitch Player on the website'
      },
    },
    featureAddSortButton: {
      featureName: 'AddSortButton',
      featureDescription: 'adds a sort button to tables',
      isEnabled: {
        value: false,
        label: 'Activate',
        disabled: true,
        disabledReason: 'does not work as expected, will be fixed in a future update',
        description: 'show option to sort entries'
      }
    }
  },
  twitch: {
    featureAutoCollectReward: {
      featureName: 'AutoCollectReward',
      featureDescription: 'collects twitch rewards automatically',
      isEnabled: {
        value: true,
        label: 'Activate',
        description: 'automatically collect view reward (chest)'
      }
    }
  },
  crunchyroll: {
    featureAutoSkip: {
      featureName: 'AutoSkip',
      featureDescription: 'this feature automatically skips the Outro/Intro',
      skipVideo: {
        value: 75,
        hideFromUser: true
      },
      isEnabled: {
        value: false,
        label: 'Activate',
        disabled: true,
        disabledReason: 'the feature is currently disabled, because crunchyroll is using iframes with content policy, making it difficult to implement this. Maybe I can find a fix in the future.',
        subFeatures: {
          skipIntro: {
            value: true,
            label: 'Openings',
            description: 'will skip Intros / Recaps at the beginning of Videos'
          },
          skipOutro: {
            value: true,
            label: 'Outros',
            description: 'will skip outro / ending / credits at the end of Videos'
          },
        }
      }
    }
  },
  netflix: {
    featureAutoSkip: {
      featureName: 'AutoSkip',
      featureDescription: 'this feature will automatically skip Intro/Outro',
      isEnabled: {
        value: false,
        label: 'Activate',
        description: 'turn skipping on or off',
        toggle: toggleAutoSkipIntro
      },
      skipIntro: {
        value: true,
        label: 'Intros',
        description: 'will skip Intros / Recaps at the beginning of Videos'
      },
      skipOutro: {
        value: true,
        label: 'Outros',
        description: 'will skip outro / ending / credits at the end of Videos'
      },
      skipButton: {
        value: true,
        label: 'add Skip Button',
        description: 'render an icon in the Video-Controls bar, which allows to quickly turn autoskip on/off',
        subFeatures: {
          hideForMovies: {
            value: false,
            label: 'hide Button for Movies',
            description: 'hide the Auto Skip Button for Movies / Only show the auto skip button for Shows/Series',
            disabled: true,
            disabledReason: 'currently disabled, because this requires access to netflix API, will be added in the future'
          }
        }
      }
    }
  }
}
const defaultSettings = Object.assign({}, userOptions);


const curbEnthusiasm = [
  [
      "S1-E1-49209",
      "S1-E2-65625",
      "S1-E3-65626",
      "S1-E4-49530",
      "S1-E5-49188",
      "S1-E6-65624",
      "S1-E7-49459",
      "S1-E8-65622",
      "S1-E9-65621",
      "S1-E10-65619"
  ],
  [
      "S2-E1-65620",
      "S2-E2-65618",
      "S2-E3-65617",
      "S2-E4-65615",
      "S2-E5-65610",
      "S2-E6-65614",
      "S2-E7-65613",
      "S2-E8-65612",
      "S2-E9-65597",
      "S2-E10-65592"
  ],
  [
      "S3-E1-65593",
      "S3-E2-65591",
      "S3-E3-65590",
      "S3-E4-65589",
      "S3-E5-65587",
      "S3-E6-65588",
      "S3-E7-65585",
      "S3-E8-65586",
      "S3-E9-65584",
      "S3-E10-65583"
  ],
  [
      "S4-E1-65582",
      "S4-E2-65581",
      "S4-E3-65580",
      "S4-E4-165283",
      "S4-E5-65579",
      "S4-E6-65578",
      "S4-E7-65577",
      "S4-E8-65576",
      "S4-E9-65575",
      "S4-E10-48722"
  ],
  [
      "S5-E1-65574",
      "S5-E2-65573",
      "S5-E3-65565",
      "S5-E4-65570",
      "S5-E5-65572",
      "S5-E6-65571",
      "S5-E7-65569",
      "S5-E8-65568",
      "S5-E9-65567",
      "S5-E10-65566"
  ],
  [
      "S6-E1-65564",
      "S6-E2-65561",
      "S6-E3-65563",
      "S6-E4-65562",
      "S6-E5-65559",
      "S6-E6-65558",
      "S6-E7-65560",
      "S6-E8-65557",
      "S6-E9-65556",
      "S6-E10-65555"
  ],
  [
      "S7-E1-65553",
      "S7-E2-65551",
      "S7-E3-65552",
      "S7-E4-65549",
      "S7-E5-65554",
      "S7-E6-165282",
      "S7-E7-65548",
      "S7-E8-65547",
      "S7-E9-65546",
      "S7-E10-65550"
  ],
  [
      "S8-E1-40562",
      "S8-E2-40550",
      "S8-E3-40548",
      "S8-E4-39143",
      "S8-E5-39140",
      "S8-E6-42063",
      "S8-E7-40519",
      "S8-E8-39114",
      "S8-E9-39134",
      "S8-E10-39102"
  ],
  [
      "S9-E1-9558",
      "S9-E2-9422",
      "S9-E3-9293",
      "S9-E4-9034",
      "S9-E5-8889",
      "S9-E6-7333",
      "S9-E7-8742",
      "S9-E8-8646",
      "S9-E9-8566",
      "S9-E10-8464"
  ],
  [
      "S10-E1-79956",
      "S10-E2-80727",
      "S10-E3-81174",
      "S10-E4-82135",
      "S10-E5-82896",
      "S10-E6-84399",
      "S10-E7-86425",
      "S10-E8-87712",
      "S10-E9-89191",
      "S10-E10-89953"
  ],
  [
      "S11-E1-150434",
      "S11-E2-152107",
      "S11-E3-152736",
      "S11-E4-153804",
      "S11-E5-154317",
      "S11-E6-154943",
      "S11-E7-155784",
      "S11-E8-156430",
      "S11-E9-157009",
      "S11-E10-157453"
  ]
];